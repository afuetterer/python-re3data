{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"python-re3data: The Pythonic client for the re3data API.","text":"<p>\u26a0\ufe0f Please note that this project is currently under active development. As such, it is considered a work in progress, and breaking changes may be introduced at any time. We encourage users to frequently check back for updates and to exercise caution when using this project in production environments. Contributions and feedback are welcome to help move the project towards a more stable release (v1.0.0).</p> CI Docs Package Meta <p><code>python-re3data</code> is a Python library that simplifies interacting with the re3data (Registry of Research Data Repositories) REST API, allowing you to easily retrieve and process metadata about research data repositories in a convenient and Pythonic way.</p> <pre><code>&gt;&gt;&gt; import re3data\n&gt;&gt;&gt; response = re3data.repositories.list()\n&gt;&gt;&gt; response\n[RepositorySummary(id='r3d100010468', doi='https://doi.org/10.17616/R3QP53', name='Zenodo', link=Link(href='https://www.re3data.org/api/beta/repository/r3d100010468', rel='self'))]\n... (remaining repositories truncated)\n</code></pre> <pre><code>&gt;&gt;&gt; response = re3data.repositories.get(\"r3d100010468\")\n&gt;&gt;&gt; response\nRepository(re3data_org_identifier='r3d100010468', repository_name=RepositoryName(value='Zenodo', language=&lt;Languages.ENG: 'eng'&gt;), additional_name=[], repository_url='https://zenodo.org/', repository_identifier=['FAIRsharing_doi:10.25504/FAIRsharing.wy4egf', 'RRID:SCR_004129', 'RRID:nlx_158614'])\n... (remaining fields truncated)\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Pythonic API interactions: Interact with the re3data API in a Pythonic way, without having to worry about low-level     HTTP requests or XML parsing.</li> <li>Repository metadata retrieval: Easily fetch and process metadata about research data repositories using     <code>re3data.repositories.list()</code>.</li> <li>Repository details retrieval: Get detailed information about a specific repository using     <code>re3data.repositories.get(repository_id)</code>.</li> <li>XML response parsers: API XML responses are parsed into Python dataclasses, providing convenient access to the     elements of the re3data.org Schema 2.2 XML Schema. This makes it easy to work     with the rich metadata provided by the API.</li> <li>Flexible response options: The response type can be switched between:<ul> <li>dataclass (default): Returns a Python dataclass object, allowing convenient access to the element of the re3data     schema</li> <li>response: Returns a Python object representing the API response</li> <li>original XML (str): Returns the raw XML response from the API</li> <li>JSON (str): Returns a JSON representation of the API response</li> <li>dictionary: Returns a dictionary representation of the API response</li> <li>csv (str): Returns a CSV representation of the API response</li> <li>dataframe: Returns a pandas.DataFrame representation of the API response</li> </ul> </li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python &gt;= 3.10</p> <p><code>python-re3data</code> is built with:</p> <ul> <li>HTTP Requests: httpx, a modern and efficient HTTP client library, handles all     API interactions.</li> <li>XML Parsing: xsdata, a powerful tool for generating Python dataclasses from XML     schemas, simplifies processing of API responses.</li> <li>Optional CLI: typer, a popular library for building command-line interfaces,     powers the user-friendly interface.</li> <li>Optional DataFrame/CSV: pandas, a powerful and flexible data analysis     library, enables generation of DataFrames and CSV files from parsed XML responses.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>python-re3data</code> via pip from PyPI:</p> <pre><code>python -m pip install python-re3data\n</code></pre> <p>or pull the Docker image from GHCR:</p> <pre><code>docker pull ghcr.io/afuetterer/python-re3data:latest\n</code></pre> <p>For a more detailed guide, see Installation.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is made with Material for MkDocs and is hosted by GitHub Pages.</p>"},{"location":"#similar-projects","title":"Similar Projects","text":"<p>There are a couple of similar projects available on GitHub, e.g. via the topic re3data. Among them are these implementations in Python:</p> Project Description Last commit py3data <code>py3data</code> is a lightweight and thin Python interface to the beta version of the API."},{"location":"#license","title":"License","text":"<p><code>python-re3data</code> is distributed under the terms of the MIT License.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#baseclient","title":"<code>BaseClient</code>","text":"<p>A base class for clients that interact with the re3data API.</p> Source code in <code>src/re3data/_client/base.py</code> <pre><code>class BaseClient:\n    \"\"\"A base class for clients that interact with the re3data API.\"\"\"\n\n    def __init__(\n        self,\n        client: type[httpx.Client] | type[httpx.AsyncClient],\n    ) -&gt; None:\n        self._client = client(\n            base_url=BASE_URL,\n            headers=DEFAULT_HEADERS,\n            timeout=DEFAULT_TIMEOUT,\n            follow_redirects=True,\n        )\n</code></pre>"},{"location":"api/#client","title":"<code>Client</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>A client that interacts with the re3data API.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <code>Client</code> <p>The underlying HTTP client.</p> <code>_repository_manager</code> <code>RepositoryManager</code> <p>The repository manager to retrieve metadata from the repositories endpoints.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = Client():\n&gt;&gt;&gt; response = client.repositories.list()\n&gt;&gt;&gt; response\n[RepositorySummary(id='r3d100010468', doi='https://doi.org/10.17616/R3QP53', name='Zenodo', link=Link(href='https://www.re3data.org/api/beta/repository/r3d100010468', rel='self'))]\n... (remaining repositories truncated)\n&gt;&gt;&gt; response = client.repositories.list(query=\"biosharing\")\n&gt;&gt;&gt; response\n[RepositorySummary(id='r3d100010142', doi='https://doi.org/10.17616/R3WS3X', name='FAIRsharing', link=Link(href='https://www.re3data.org/api/beta/repository/r3d100010142', rel='self'))]\n</code></pre> Source code in <code>src/re3data/_client/_sync.py</code> <pre><code>class Client(BaseClient):\n    \"\"\"A client that interacts with the re3data API.\n\n    Attributes:\n        _client: The underlying HTTP client.\n        _repository_manager: The repository manager to retrieve metadata from the repositories endpoints.\n\n    Examples:\n        &gt;&gt;&gt; client = Client():\n        &gt;&gt;&gt; response = client.repositories.list()\n        &gt;&gt;&gt; response\n        [RepositorySummary(id='r3d100010468', doi='https://doi.org/10.17616/R3QP53', name='Zenodo', link=Link(href='https://www.re3data.org/api/beta/repository/r3d100010468', rel='self'))]\n        ... (remaining repositories truncated)\n        &gt;&gt;&gt; response = client.repositories.list(query=\"biosharing\")\n        &gt;&gt;&gt; response\n        [RepositorySummary(id='r3d100010142', doi='https://doi.org/10.17616/R3WS3X', name='FAIRsharing', link=Link(href='https://www.re3data.org/api/beta/repository/r3d100010142', rel='self'))]\n    \"\"\"\n\n    _client: httpx.Client\n\n    def __init__(self) -&gt; None:\n        super().__init__(httpx.Client)\n        self._client.event_hooks[\"response\"] = [log_response]\n        self._repository_manager: RepositoryManager = RepositoryManager(self)\n\n    def _request(self, path: str, query_params: dict[str, str] | None = None) -&gt; Response:\n        \"\"\"Send a HTTP GET request to the specified API endpoint.\n\n        Args:\n            path: The path to send the request to.\n            query_params: Optional URL query parameters to be sent with the HTTP GET request. This dictionary\n                contains key-value pairs that will be added as query parameters to the API endpoint specified by path.\n\n        Returns:\n            The response object from the HTTP request.\n\n        Raises:\n            httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n            RepositoryNotFoundError: If the `repository_id` is not found.\n        \"\"\"\n        http_response = self._client.get(path, params=query_params)\n        if http_response.is_server_error:\n            http_response.raise_for_status()\n        return _build_response(http_response)\n\n    @property\n    def repositories(self) -&gt; RepositoryManager:\n        \"\"\"Get the repository manager for this client.\n\n        Returns:\n            The repository manager.\n        \"\"\"\n        return self._repository_manager\n</code></pre>"},{"location":"api/#re3data.Client.repositories","title":"<code>repositories: RepositoryManager</code>  <code>property</code>","text":"<p>Get the repository manager for this client.</p> <p>Returns:</p> Type Description <code>RepositoryManager</code> <p>The repository manager.</p>"},{"location":"api/#repositorymanager","title":"<code>RepositoryManager</code>","text":"<p>A manager for interacting with repositories in the re3data API.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <p>The client used to make requests.</p> Source code in <code>src/re3data/_client/_sync.py</code> <pre><code>class RepositoryManager:\n    \"\"\"A manager for interacting with repositories in the re3data API.\n\n    Attributes:\n        _client: The client used to make requests.\n    \"\"\"\n\n    def __init__(self, client: Client) -&gt; None:\n        self._client = client\n\n    def list(\n        self,\n        query: str | None = None,\n        return_type: ReturnType = ReturnType.DATACLASS,\n        count: bool = False,\n    ) -&gt; list[RepositorySummary] | Response | dict[str, Any] | DataFrame | str | int:\n        \"\"\"List the metadata of all repositories in the re3data API.\n\n        Args:\n            query: A query string to filter the results. If provided, only repositories matching the query\n                will be returned.\n            return_type: The desired return type for the API resource. Defaults to `ReturnType.DATACLASS`.\n            count: Whether to return the total number of matching items instead of a list of repositories.\n\n        Returns:\n            Depending on the `return_type`, this can be a list of RepositorySummary objects, an HTTP response,\n                a dictionary representation or the original XML.\n\n        Raises:\n            ValueError: If an invalid `return_type` is provided.\n            httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n        \"\"\"\n        is_valid_return_type(return_type)\n        query_params = _build_query_params(query)\n        response = self._client._request(Endpoint.REPOSITORY_LIST.value, query_params)\n        return _dispatch_return_type(response, ResourceType.REPOSITORY_LIST, return_type, count)\n\n    def get(\n        self, repository_id: str, return_type: ReturnType = ReturnType.DATACLASS\n    ) -&gt; Repository | Response | dict[str, Any] | DataFrame | str:\n        \"\"\"Get the metadata of a specific repository.\n\n        Args:\n            repository_id: The identifier of the repository to retrieve.\n            return_type: The desired return type for the API resource. Defaults to `ReturnType.DATACLASS`.\n\n        Returns:\n            Depending on the `return_type`, this can be a Repository object, an HTTP response,\n                a dictionary representation or the original XML.\n\n        Raises:\n            ValueError: If an invalid `return_type` is provided.\n            httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n            RepositoryNotFoundError: If no repository with the given ID is found.\n        \"\"\"\n        is_valid_return_type(return_type)\n        response = self._client._request(Endpoint.REPOSITORY.value.format(repository_id=repository_id))\n        if response.status_code == httpx.codes.NOT_FOUND:\n            raise RepositoryNotFoundError(f\"No repository with id '{repository_id}' available at {response.url}.\")\n        return _dispatch_return_type(response, ResourceType.REPOSITORY, return_type)\n</code></pre>"},{"location":"api/#re3data._client.RepositoryManager.get","title":"<code>get(repository_id, return_type=ReturnType.DATACLASS)</code>","text":"<p>Get the metadata of a specific repository.</p> <p>Parameters:</p> Name Type Description Default <code>repository_id</code> <code>str</code> <p>The identifier of the repository to retrieve.</p> required <code>return_type</code> <code>ReturnType</code> <p>The desired return type for the API resource. Defaults to <code>ReturnType.DATACLASS</code>.</p> <code>DATACLASS</code> <p>Returns:</p> Type Description <code>Repository | Response | dict[str, Any] | DataFrame | str</code> <p>Depending on the <code>return_type</code>, this can be a Repository object, an HTTP response, a dictionary representation or the original XML.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid <code>return_type</code> is provided.</p> <code>HTTPStatusError</code> <p>If the server returned an error status code &gt;= 500.</p> <code>RepositoryNotFoundError</code> <p>If no repository with the given ID is found.</p> Source code in <code>src/re3data/_client/_sync.py</code> <pre><code>def get(\n    self, repository_id: str, return_type: ReturnType = ReturnType.DATACLASS\n) -&gt; Repository | Response | dict[str, Any] | DataFrame | str:\n    \"\"\"Get the metadata of a specific repository.\n\n    Args:\n        repository_id: The identifier of the repository to retrieve.\n        return_type: The desired return type for the API resource. Defaults to `ReturnType.DATACLASS`.\n\n    Returns:\n        Depending on the `return_type`, this can be a Repository object, an HTTP response,\n            a dictionary representation or the original XML.\n\n    Raises:\n        ValueError: If an invalid `return_type` is provided.\n        httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n        RepositoryNotFoundError: If no repository with the given ID is found.\n    \"\"\"\n    is_valid_return_type(return_type)\n    response = self._client._request(Endpoint.REPOSITORY.value.format(repository_id=repository_id))\n    if response.status_code == httpx.codes.NOT_FOUND:\n        raise RepositoryNotFoundError(f\"No repository with id '{repository_id}' available at {response.url}.\")\n    return _dispatch_return_type(response, ResourceType.REPOSITORY, return_type)\n</code></pre>"},{"location":"api/#re3data._client.RepositoryManager.list","title":"<code>list(query=None, return_type=ReturnType.DATACLASS, count=False)</code>","text":"<p>List the metadata of all repositories in the re3data API.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str | None</code> <p>A query string to filter the results. If provided, only repositories matching the query will be returned.</p> <code>None</code> <code>return_type</code> <code>ReturnType</code> <p>The desired return type for the API resource. Defaults to <code>ReturnType.DATACLASS</code>.</p> <code>DATACLASS</code> <code>count</code> <code>bool</code> <p>Whether to return the total number of matching items instead of a list of repositories.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[RepositorySummary] | Response | dict[str, Any] | DataFrame | str | int</code> <p>Depending on the <code>return_type</code>, this can be a list of RepositorySummary objects, an HTTP response, a dictionary representation or the original XML.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid <code>return_type</code> is provided.</p> <code>HTTPStatusError</code> <p>If the server returned an error status code &gt;= 500.</p> Source code in <code>src/re3data/_client/_sync.py</code> <pre><code>def list(\n    self,\n    query: str | None = None,\n    return_type: ReturnType = ReturnType.DATACLASS,\n    count: bool = False,\n) -&gt; list[RepositorySummary] | Response | dict[str, Any] | DataFrame | str | int:\n    \"\"\"List the metadata of all repositories in the re3data API.\n\n    Args:\n        query: A query string to filter the results. If provided, only repositories matching the query\n            will be returned.\n        return_type: The desired return type for the API resource. Defaults to `ReturnType.DATACLASS`.\n        count: Whether to return the total number of matching items instead of a list of repositories.\n\n    Returns:\n        Depending on the `return_type`, this can be a list of RepositorySummary objects, an HTTP response,\n            a dictionary representation or the original XML.\n\n    Raises:\n        ValueError: If an invalid `return_type` is provided.\n        httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n    \"\"\"\n    is_valid_return_type(return_type)\n    query_params = _build_query_params(query)\n    response = self._client._request(Endpoint.REPOSITORY_LIST.value, query_params)\n    return _dispatch_return_type(response, ResourceType.REPOSITORY_LIST, return_type, count)\n</code></pre>"},{"location":"api/#asyncclient","title":"<code>AsyncClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>A client that interacts with the re3data API.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <code>AsyncClient</code> <p>The underlying HTTP client.</p> <code>_repository_manager</code> <code>AsyncRepositoryManager</code> <p>The repository manager to retrieve metadata from the repositories endpoints.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async_client = AsyncClient():\n&gt;&gt;&gt; response = await async_client.repositories.list()\n&gt;&gt;&gt; response\n[RepositorySummary(id='r3d100010468', doi='https://doi.org/10.17616/R3QP53', name='Zenodo', link=Link(href='https://www.re3data.org/api/beta/repository/r3d100010468', rel='self'))]\n... (remaining repositories truncated)\n&gt;&gt;&gt; response = await async_client.repositories.list(query=\"biosharing\")\n&gt;&gt;&gt; response\n[RepositorySummary(id='r3d100010142', doi='https://doi.org/10.17616/R3WS3X', name='FAIRsharing', link=Link(href='https://www.re3data.org/api/beta/repository/r3d100010142', rel='self'))]\n</code></pre> Source code in <code>src/re3data/_client/_async.py</code> <pre><code>class AsyncClient(BaseClient):\n    \"\"\"A client that interacts with the re3data API.\n\n    Attributes:\n        _client: The underlying HTTP client.\n        _repository_manager: The repository manager to retrieve metadata from the repositories endpoints.\n\n    Examples:\n        &gt;&gt;&gt; async_client = AsyncClient():\n        &gt;&gt;&gt; response = await async_client.repositories.list()\n        &gt;&gt;&gt; response\n        [RepositorySummary(id='r3d100010468', doi='https://doi.org/10.17616/R3QP53', name='Zenodo', link=Link(href='https://www.re3data.org/api/beta/repository/r3d100010468', rel='self'))]\n        ... (remaining repositories truncated)\n        &gt;&gt;&gt; response = await async_client.repositories.list(query=\"biosharing\")\n        &gt;&gt;&gt; response\n        [RepositorySummary(id='r3d100010142', doi='https://doi.org/10.17616/R3WS3X', name='FAIRsharing', link=Link(href='https://www.re3data.org/api/beta/repository/r3d100010142', rel='self'))]\n    \"\"\"\n\n    _client: httpx.AsyncClient\n\n    def __init__(self) -&gt; None:\n        super().__init__(httpx.AsyncClient)\n        self._client.event_hooks[\"response\"] = [async_log_response]\n        self._repository_manager: AsyncRepositoryManager = AsyncRepositoryManager(self)\n\n    async def _request(self, path: str, query_params: dict[str, str] | None = None) -&gt; Response:\n        \"\"\"Send a HTTP GET request to the specified API endpoint.\n\n        Args:\n            path: The path to send the request to.\n            query_params: Optional URL query parameters to be sent with the HTTP GET request. This dictionary\n                contains key-value pairs that will be added as query parameters to the API endpoint specified by path.\n\n        Returns:\n            The response object from the HTTP request.\n\n        Raises:\n            httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n            RepositoryNotFoundError: If the `repository_id` is not found.\n        \"\"\"\n        http_response = await self._client.get(path, params=query_params)\n        if http_response.is_server_error:\n            http_response.raise_for_status()\n        return _build_response(http_response)\n\n    @property\n    def repositories(self) -&gt; AsyncRepositoryManager:\n        \"\"\"Get the repository manager for this client.\n\n        Returns:\n            The repository manager.\n        \"\"\"\n        return self._repository_manager\n</code></pre>"},{"location":"api/#re3data.AsyncClient.repositories","title":"<code>repositories: AsyncRepositoryManager</code>  <code>property</code>","text":"<p>Get the repository manager for this client.</p> <p>Returns:</p> Type Description <code>AsyncRepositoryManager</code> <p>The repository manager.</p>"},{"location":"api/#asyncrepositorymanager","title":"<code>AsyncRepositoryManager</code>","text":"<p>A manager for interacting with repositories in the re3data API.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <p>The client used to make requests.</p> Source code in <code>src/re3data/_client/_async.py</code> <pre><code>class AsyncRepositoryManager:\n    \"\"\"A manager for interacting with repositories in the re3data API.\n\n    Attributes:\n        _client: The client used to make requests.\n    \"\"\"\n\n    def __init__(self, client: AsyncClient) -&gt; None:\n        self._client = client\n\n    async def list(\n        self,\n        query: str | None = None,\n        return_type: ReturnType = ReturnType.DATACLASS,\n        count: bool = False,\n    ) -&gt; list[RepositorySummary] | Response | dict[str, Any] | DataFrame | str | int:\n        \"\"\"List the metadata of all repositories in the re3data API.\n\n        Args:\n            query: A query string to filter the results. If provided, only repositories matching the query\n                will be returned.\n            return_type: The desired return type for the API resource. Defaults to `ReturnType.DATACLASS`.\n            count: Whether to return the total number of matching items instead of a list of repositories.\n\n        Returns:\n            Depending on the `return_type`, this can be a list of RepositorySummary objects, an HTTP response,\n                a dictionary representation or the original XML.\n\n        Raises:\n            ValueError: If an invalid `return_type` is provided.\n            httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n        \"\"\"\n        is_valid_return_type(return_type)\n        query_params = _build_query_params(query)\n        response = await self._client._request(Endpoint.REPOSITORY_LIST.value, query_params)\n        return _dispatch_return_type(response, ResourceType.REPOSITORY_LIST, return_type, count)\n\n    async def get(\n        self, repository_id: str, return_type: ReturnType = ReturnType.DATACLASS\n    ) -&gt; Repository | Response | dict[str, Any] | DataFrame | str:\n        \"\"\"Get the metadata of a specific repository.\n\n        Args:\n            repository_id: The identifier of the repository to retrieve.\n            return_type: The desired return type for the API resource. Defaults to `ReturnType.DATACLASS`.\n\n        Returns:\n            Depending on the `return_type`, this can be a Repository object, an HTTP response,\n                a dictionary representation or the original XML.\n\n        Raises:\n            ValueError: If an invalid `return_type` is provided.\n            httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n            RepositoryNotFoundError: If no repository with the given ID is found.\n        \"\"\"\n        is_valid_return_type(return_type)\n        response = await self._client._request(Endpoint.REPOSITORY.value.format(repository_id=repository_id))\n        if response.status_code == httpx.codes.NOT_FOUND:\n            raise RepositoryNotFoundError(f\"No repository with id '{repository_id}' available at {response.url}.\")\n        return _dispatch_return_type(response, ResourceType.REPOSITORY, return_type)\n</code></pre>"},{"location":"api/#re3data._client.AsyncRepositoryManager.get","title":"<code>get(repository_id, return_type=ReturnType.DATACLASS)</code>  <code>async</code>","text":"<p>Get the metadata of a specific repository.</p> <p>Parameters:</p> Name Type Description Default <code>repository_id</code> <code>str</code> <p>The identifier of the repository to retrieve.</p> required <code>return_type</code> <code>ReturnType</code> <p>The desired return type for the API resource. Defaults to <code>ReturnType.DATACLASS</code>.</p> <code>DATACLASS</code> <p>Returns:</p> Type Description <code>Repository | Response | dict[str, Any] | DataFrame | str</code> <p>Depending on the <code>return_type</code>, this can be a Repository object, an HTTP response, a dictionary representation or the original XML.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid <code>return_type</code> is provided.</p> <code>HTTPStatusError</code> <p>If the server returned an error status code &gt;= 500.</p> <code>RepositoryNotFoundError</code> <p>If no repository with the given ID is found.</p> Source code in <code>src/re3data/_client/_async.py</code> <pre><code>async def get(\n    self, repository_id: str, return_type: ReturnType = ReturnType.DATACLASS\n) -&gt; Repository | Response | dict[str, Any] | DataFrame | str:\n    \"\"\"Get the metadata of a specific repository.\n\n    Args:\n        repository_id: The identifier of the repository to retrieve.\n        return_type: The desired return type for the API resource. Defaults to `ReturnType.DATACLASS`.\n\n    Returns:\n        Depending on the `return_type`, this can be a Repository object, an HTTP response,\n            a dictionary representation or the original XML.\n\n    Raises:\n        ValueError: If an invalid `return_type` is provided.\n        httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n        RepositoryNotFoundError: If no repository with the given ID is found.\n    \"\"\"\n    is_valid_return_type(return_type)\n    response = await self._client._request(Endpoint.REPOSITORY.value.format(repository_id=repository_id))\n    if response.status_code == httpx.codes.NOT_FOUND:\n        raise RepositoryNotFoundError(f\"No repository with id '{repository_id}' available at {response.url}.\")\n    return _dispatch_return_type(response, ResourceType.REPOSITORY, return_type)\n</code></pre>"},{"location":"api/#re3data._client.AsyncRepositoryManager.list","title":"<code>list(query=None, return_type=ReturnType.DATACLASS, count=False)</code>  <code>async</code>","text":"<p>List the metadata of all repositories in the re3data API.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str | None</code> <p>A query string to filter the results. If provided, only repositories matching the query will be returned.</p> <code>None</code> <code>return_type</code> <code>ReturnType</code> <p>The desired return type for the API resource. Defaults to <code>ReturnType.DATACLASS</code>.</p> <code>DATACLASS</code> <code>count</code> <code>bool</code> <p>Whether to return the total number of matching items instead of a list of repositories.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[RepositorySummary] | Response | dict[str, Any] | DataFrame | str | int</code> <p>Depending on the <code>return_type</code>, this can be a list of RepositorySummary objects, an HTTP response, a dictionary representation or the original XML.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid <code>return_type</code> is provided.</p> <code>HTTPStatusError</code> <p>If the server returned an error status code &gt;= 500.</p> Source code in <code>src/re3data/_client/_async.py</code> <pre><code>async def list(\n    self,\n    query: str | None = None,\n    return_type: ReturnType = ReturnType.DATACLASS,\n    count: bool = False,\n) -&gt; list[RepositorySummary] | Response | dict[str, Any] | DataFrame | str | int:\n    \"\"\"List the metadata of all repositories in the re3data API.\n\n    Args:\n        query: A query string to filter the results. If provided, only repositories matching the query\n            will be returned.\n        return_type: The desired return type for the API resource. Defaults to `ReturnType.DATACLASS`.\n        count: Whether to return the total number of matching items instead of a list of repositories.\n\n    Returns:\n        Depending on the `return_type`, this can be a list of RepositorySummary objects, an HTTP response,\n            a dictionary representation or the original XML.\n\n    Raises:\n        ValueError: If an invalid `return_type` is provided.\n        httpx.HTTPStatusError: If the server returned an error status code &gt;= 500.\n    \"\"\"\n    is_valid_return_type(return_type)\n    query_params = _build_query_params(query)\n    response = await self._client._request(Endpoint.REPOSITORY_LIST.value, query_params)\n    return _dispatch_return_type(response, ResourceType.REPOSITORY_LIST, return_type, count)\n</code></pre>"},{"location":"api/#response","title":"<code>Response</code>","text":"<p>A response received from the re3data API, encapsulating the HTTP response.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>URL</code> <p>The URL of the request.</p> <code>status_code</code> <code>codes</code> <p>The HTTP status code of the response.</p> <code>headers</code> <code>Headers</code> <p>A dictionary-like object containing metadata about the response, such as content type and length.</p> <code>text</code> <code>str</code> <p>The text content of the response.</p> Source code in <code>src/re3data/_response.py</code> <pre><code>@dataclass(slots=True)\nclass Response:\n    \"\"\"A response received from the re3data API, encapsulating the HTTP response.\n\n    Attributes:\n        url: The URL of the request.\n        status_code: The HTTP status code of the response.\n        headers: A dictionary-like object containing metadata about the response, such as content type and length.\n        text: The text content of the response.\n    \"\"\"\n\n    url: httpx.URL\n    status_code: httpx.codes\n    headers: httpx.Headers = field(repr=False)\n    text: str = field(repr=False)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>This project adheres to Semantic Versioning. See conventional commits for commit guidelines.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#0100-2024-12-11","title":"0.10.0 (2024-12-11)","text":""},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>update uv installation instructions (#227) (<code>d83fe84</code>)</li> </ul>"},{"location":"changelog/#090-2024-07-06","title":"0.9.0 (2024-07-06)","text":""},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>readme: update key features in readme (#165) (<code>2396cf5</code>)</li> <li>add features page (#157) (<code>2348b01</code>)</li> </ul>"},{"location":"changelog/#080-2024-07-03","title":"0.8.0 (2024-07-03)","text":""},{"location":"changelog/#070-2024-07-03","title":"0.7.0 (2024-07-03)","text":""},{"location":"changelog/#060-2024-07-02","title":"0.6.0 (2024-07-02)","text":""},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>add installation guide (#129) (<code>0de3b5e</code>)</li> <li>enable permalinks for headings (#132) (<code>89d0a3d</code>)</li> </ul>"},{"location":"changelog/#050-2024-06-05","title":"0.5.0 (2024-06-05)","text":""},{"location":"changelog/#040-2024-05-28","title":"0.4.0 (2024-05-28)","text":""},{"location":"changelog/#documentation_3","title":"Documentation","text":"<ul> <li>add extra css for prompt (#85) (<code>16545d7</code>)</li> <li>add outdated message (#84) (<code>7218b47</code>)</li> <li>add reference level in navigation (#80) (<code>6a41547</code>)</li> </ul>"},{"location":"changelog/#030-2024-05-26","title":"0.3.0 (2024-05-26)","text":""},{"location":"changelog/#documentation_4","title":"Documentation","text":"<ul> <li>add doi to citation.cff and badge to readme (#66) (<code>2fde7ee</code>)</li> </ul>"},{"location":"changelog/#020-2024-05-23","title":"0.2.0 (2024-05-23)","text":""},{"location":"changelog/#documentation_5","title":"Documentation","text":"<ul> <li>readme: remove table of contents (#62) (<code>8f224e8</code>)</li> <li>readme: add status badge (#56) (<code>cfc9f5a</code>)</li> <li>add api reference (#47) (<code>9e455c4</code>)</li> <li>add changelog to docs (#43) (<code>a167c46</code>)</li> <li>readme: add pypi badges (#37) (<code>f4b31a9</code>)</li> </ul>"},{"location":"changelog/#010-2024-05-20","title":"0.1.0 (2024-05-20)","text":""},{"location":"changelog/#documentation_6","title":"Documentation","text":"<ul> <li>readme: add short project description (#28) (<code>c20f23e</code>)</li> <li>readme: add similar projects (#23) (<code>7e3e919</code>)</li> <li>set up python-semantic-release templates (#21) (<code>bcd976a</code>)</li> <li>readme: add codeql badge (#18) (<code>ee6f6aa</code>)</li> </ul>"},{"location":"cli/","title":"Command Line Interface","text":"<p>python-re3data.</p> <p>Usage:</p> <pre><code>$ re3data [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>-V, --version</code>: Show python-re3data version and exit.</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>repository</code></li> </ul>"},{"location":"cli/#re3data-repository","title":"<code>re3data repository</code>","text":"<p>Usage:</p> <pre><code>$ re3data repository [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>list</code>: List the metadata of all repositories in...</li> <li><code>get</code>: Get the metadata of a specific repository.</li> </ul>"},{"location":"cli/#re3data-repository-list","title":"<code>re3data repository list</code>","text":"<p>List the metadata of all repositories in the re3data API.</p> <p>Usage:</p> <pre><code>$ re3data repository list [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--query TEXT</code>: A query to filter the results. If provided, only repositories matching the query will be returned.</li> <li><code>--return-type [csv|dataclass|dataframe|dict|json|response|xml]</code>: [default: dataclass]</li> <li><code>--count / --no-count</code>: [default: no-count]</li> <li><code>--outfile FILE</code></li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#re3data-repository-get","title":"<code>re3data repository get</code>","text":"<p>Get the metadata of a specific repository.</p> <p>Usage:</p> <pre><code>$ re3data repository get [OPTIONS] REPOSITORY_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>REPOSITORY_ID</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>--return-type [csv|dataclass|dataframe|dict|json|response|xml]</code>: [default: dataclass]</li> <li><code>--outfile FILE</code></li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"contributing/","title":"Contributing to python-re3data","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways.</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/afuetterer/python-re3data/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with feature and help wanted is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p><code>python-re3data</code> could always use more documentation, whether as part of the official <code>python-re3data</code> docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/afuetterer/python-re3data/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome.</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute?</p> <p>You need Python &gt;= 3.10 and hatch. You can install it globally with pipx:</p> <pre><code>$ pipx install hatch\n</code></pre> <p>or locally with (this will install it in the local virtual environment):</p> <pre><code>$ python -m pip install hatch\n</code></pre> <p>Here's how to set up <code>python-re3data</code> for local development.</p> <ol> <li> <p>Fork the python-re3data repository on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:username/python-re3data.git\n</code></pre> </li> <li> <p>Install your local copy into a virtual environment. Assuming you have hatch installed, this is how you set up your     fork for local development:</p> <pre><code>$ cd python-re3data\n$ hatch shell\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass pre-commit and the tests:</p> <pre><code>$ hatch run check\n$ hatch run cov\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a     docstring.</li> <li>The pull request should work for Python &gt;= 3.10. Check https://github.com/afuetterer/python-re3data/pulls and make     sure that all the tests pass.</li> </ol> <p>This contributor guide is adapted from cookiecutter-pypackage (BSD 3-Clause License).</p>"},{"location":"exceptions/","title":"Exceptions","text":"<p>The _exceptions module defines exception classes for handling error scenarios encountered when using the re3data API.</p> <p>Classes:</p> Name Description <code>Re3dataError</code> <p>Base exception class for errors related to the re3data API.</p> <code>RepositoryNotFoundError</code> <p>Exception raised when a repository is not found.</p>"},{"location":"exceptions/#re3data._exceptions.Re3dataError","title":"<code>Re3dataError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception class for errors related to the re3data API.</p> Source code in <code>src/re3data/_exceptions.py</code> <pre><code>class Re3dataError(Exception):\n    \"\"\"Base exception class for errors related to the re3data API.\"\"\"\n</code></pre>"},{"location":"exceptions/#re3data._exceptions.RepositoryNotFoundError","title":"<code>RepositoryNotFoundError</code>","text":"<p>               Bases: <code>Re3dataError</code></p> <p>Exception raised when a repository is not found.</p> Source code in <code>src/re3data/_exceptions.py</code> <pre><code>class RepositoryNotFoundError(Re3dataError):\n    \"\"\"Exception raised when a repository is not found.\"\"\"\n</code></pre>"},{"location":"features/","title":"Features","text":""},{"location":"features/#repositories","title":"Repositories","text":"<p>Some features listed here, loosely correspond to the features of the endpoints defined in the re3data API.</p> <ul> <li> retrieve metadata about all repositories</li> <li> retrieve a single repository by its identifier</li> <li> search for repositories with a query string</li> <li> get total count of retrieved repositories</li> <li> filter and retrieve repositories</li> </ul>"},{"location":"features/#return-types","title":"Return Types","text":"<p>The return types are based on the original XML responses from the API, with additional options for improved usability.</p> <ul> <li> Original XML (str)</li> <li> Dataclass representation</li> <li> Response object</li> <li> Dictionary</li> <li> JSON (str)</li> <li> CSV (str)</li> <li> Pandas DataFrame</li> </ul>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#installing-with-pip-recommended","title":"Installing with pip (Recommended)","text":"<p>To install using <code>pip</code>, run the following command:</p> <pre><code>python -m pip install python-re3data\n</code></pre> <p>This will automatically install compatible versions of all dependencies, including <code>httpx</code> and <code>xsdata</code>.</p> <p>Note</p> <p>It is highly recommended creating a virtual environment before installing the project. This will help keep your dependencies isolated and prevent conflicts with other projects. You can use <code>venv</code> to create and manage virtual environments.</p> <p>You can also install optional dependencies, such as the command line interface, by using <code>pip install python-re3data</code> with the <code>[cli]</code> flag:</p> <pre><code>python -m pip install \"python-re3data[cli]\"\n</code></pre> <p>For more details, see Optional Dependencies.</p>"},{"location":"install/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher installed on your machine</li> </ul> <p>Alternative: Use uv instead of pip</p> <p>uv<sup>1</sup> is a fast Python package installer and resolver, written in Rust.</p> <p>Create a virtual environment in the current directory:</p> <pre><code>uv venv\n</code></pre> <p>Install the project and its dependencies:</p> <pre><code>uv add python-re3data\n</code></pre>"},{"location":"install/#pulling-the-docker-image","title":"Pulling the Docker Image","text":"<p>Pull the official image from GHCR:</p> <pre><code>docker pull ghcr.io/afuetterer/python-re3data:latest\n</code></pre> <p>Note</p> <p>The optional <code>[cli]</code> dependency group is pre-installed in the Docker image and the <code>re3data</code> executable is provided as an entry point.</p> <p>Run the container with:</p> <pre><code>$ docker run --rm afuetterer/python-re3data --version\n0.5.0\n</code></pre> <p>Alternative: Use Podman instead of Docker</p> <p>Podman is an open-source containerization platform that allows you to create, run, and manage Linux containers.</p> <p>Pull the official image from GHCR:</p> <pre><code>podman pull ghcr.io/afuetterer/python-re3data:latest\n</code></pre> <p>Run the container with:</p> <pre><code>$ podman run --rm afuetterer/python-re3data --version\n0.5.0\n</code></pre>"},{"location":"install/#requirements_1","title":"Requirements","text":"<ul> <li>Docker<sup>2</sup> or Podman<sup>3</sup> installed and running on your machine</li> </ul>"},{"location":"install/#installing-from-source-with-git","title":"Installing from Source with Git","text":"<p>Clone the repository from GitHub:</p> <pre><code>git clone https://github.com/afuetterer/python-re3data.git\n</code></pre> <p>Change into the directory:</p> <pre><code>cd python-re3data\n</code></pre> <p>Finally, install the project and its dependencies:</p> <pre><code>python -m pip install .\n</code></pre>"},{"location":"install/#requirements_2","title":"Requirements","text":"<ul> <li>Git installed on your machine</li> <li>Python 3.10 or higher installed on your machine</li> </ul>"},{"location":"install/#dependencies","title":"Dependencies","text":""},{"location":"install/#required-dependencies","title":"Required Dependencies","text":"<p><code>python-re3data</code> requires the following dependencies:</p> Package Version Description httpx &gt;= 0.27 A modern and efficient HTTP client library, handles all API interactions. xsdata &gt;= 24.5 A powerful tool for generating Python dataclasses from XML schemas, simplifies processing of API responses."},{"location":"install/#optional-dependencies","title":"Optional dependencies","text":""},{"location":"install/#command-line-interface","title":"Command Line Interface","text":"<p>Install with <code>python -m pip install \"python-re3data[cli]\"</code>.</p> Package Version Description typer &gt;= 0.12 A popular library for building command-line interfaces, powers the user-friendly interface."},{"location":"install/#csv","title":"CSV","text":"<p>Install with <code>python -m pip install \"python-re3data[csv]\"</code>.</p> Package Version Description pandas &gt;= 2.0 A powerful and flexible data analysis library, enables generation of DataFrames and CSV files from parsed XML responses. <ol> <li> <p>For installation instructions, see Getting Started.\u00a0\u21a9</p> </li> <li> <p>For installation instructions, see Install Docker Engine.\u00a0\u21a9</p> </li> <li> <p>For installation instructions, see Podman Installation Instructions.\u00a0\u21a9</p> </li> </ol>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Heinz-Alexander F\u00fctterer</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"resources/","title":"Resources","text":"<p>API resources for python-re3data.</p>"},{"location":"resources/#re3data._resources.AdditionalName","title":"<code>AdditionalName</code>  <code>dataclass</code>","text":"<p>Attributes: value: language: Language of the research data repository additional name.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass AdditionalName:\n    \"\"\"Attributes:\n    value:\n    language: Language of the research data repository additional name.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: str = field(\n        default=\"\",\n        metadata={\n            \"required\": True,\n        },\n    )\n    language: None | Languages = field(\n        default=None,\n        metadata={\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Api","title":"<code>Api</code>  <code>dataclass</code>","text":"<p>Attributes: value: api_type: Type of API.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass Api:\n    \"\"\"Attributes:\n    value:\n    api_type: Type of API.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: str = field(\n        default=\"\",\n        metadata={\n            \"required\": True,\n        },\n    )\n    api_type: None | ApiTypes = field(\n        default=None,\n        metadata={\n            \"name\": \"apiType\",\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.ContentType","title":"<code>ContentType</code>  <code>dataclass</code>","text":"<p>Attributes: value: content_type_scheme: The name and/or URL of the subject scheme or classification code (e.g.parse).</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass ContentType:\n    \"\"\"Attributes:\n    value:\n    content_type_scheme: The name and/or URL of the subject scheme or classification code (e.g.parse).\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: None | ContentTypeText = field(\n        default=None,\n        metadata={\n            \"required\": True,\n        },\n    )\n    content_type_scheme: None | ContentTypeScheme = field(\n        default=None,\n        metadata={\n            \"name\": \"contentTypeScheme\",\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Countries","title":"<code>Countries</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes: ABW: Aruba AFG: Afghanistan AGO: Angola AIA: Anguilla ALA: Aland Islands ALB: Albania AND: Andorra ARE: United Arab Emirates ARG: Argentina ARM: Armenia ASM: American Samoa ATA: Antarctica ATF: French Southern Territories ATG: Antigua and Barbuda AUS: Australia AUT: Austria AZE: Azerbaijan BDI: Burundi BEL: Belgium BEN: Benin BES: Bonaire, Sint Eustatius and Saba BFA: Burkina Faso BGD: Bangladesh BGR: Bulgaria BHR: Bahrain BHS: Bahamas BIH: Bosnia and Herzegovina BLM: Saint Barthelemy BLR: Belarus BLZ: Belize BMU: Bermuda BOL: Bolivia, Plurinational State of BRA: Brazil BRB: Barbados BRN: Brunei Darussalam BTN: Bhutan BVT: Bouvet Island BWA: Botswana CAF: Central African Republic CAN: Canada CCK: Cocos (Keeling) Islands CHE: Switzerland CHL: Chile CHN: China CIV: Cote d'Ivoire CMR: Cameroon COD: Congo, the Democratic Republic of the COG: Congo COK: Cook Islands COL: Colombia COM: Comoros CPV: Cape Verde CRI: Costa Rica CUB: Cuba CUW: Curacao CXR: Christmas Island CYM: Cayman Islands CYP: Cyprus CZE: Czech Republic DEU: Germany DJI: Djibouti DMA: Dominica DNK: Denmark DOM: Dominican Republic DZA: Algeria ECU: Ecuador EGY: Egypt ERI: Eritrea ESH: Western Sahara ESP: Spain EST: Estonia ETH: Ethiopia FIN: Finland FJI: Fiji FLK: Falkland Islands (Malvinas) FRA: France FRO: Faroe Islands FSM: Micronesia, Federated States of GAB: Gabon GBR: United Kingdom GEO: Georgia GGY: Guernsey GHA: Ghana GIB: Gibraltar GIN: Guinea GLP: Guadeloupe GMB: Gambia GNB: Guinea-Bissau GNQ: Equatorial Guinea GRC: Greece GRD: Grenada GRL: Greenland GTM: Guatemala GUF: French Guiana GUM: Guam GUY: Guyana HKG: Hong Kong HMD: Heard Island and McDonald Islands HND: Honduras HRV: Croatia HTI: Haiti HUN: Hungary IDN: Indonesia IMN: Isle of Man IND: India IOT: British Indian Ocean Territory IRL: Ireland IRN: Iran, Islamic Republic of IRQ: Iraq ISL: Iceland ISR: Israel ITA: Italy JAM: Jamaica JEY: Jersey JOR: Jordan JPN: Japan KAZ: Kazakhstan KEN: Kenya KGZ: Kyrgyzstan KHM: Cambodia KIR: Kiribati KNA: Saint Kitts and Nevis KOR: Korea, Republic of KWT: Kuwait LAO: Lao People's Democratic Republic LBN: Lebanon LBR: Liberia LBY: Libya LCA: Saint Lucia LIE: Liechtenstein LKA: Sri Lanka LSO: Lesotho LTU: Lithuania LUX: Luxembourg LVA: Latvia MAC: Macao MAF: Saint Martin (French part) MAR: Morocco MCO: Monaco MDA: Moldova, Republic of MDG: Madagascar MDV: Maldives MEX: Mexico MHL: Marshall Islands MKD: Macedonia, the former Yugoslav Republic of MLI: Mali MLT: Malta MMR: Myanmar MNE: Montenegro MNG: Mongolia MNP: Northern Mariana Islands MOZ: Mozambique MRT: Mauritania MSR: Montserrat MTQ: Martinique MUS: Mauritius MWI: Malawi MYS: Malaysia MYT: Mayotte NAM: Namibia NCL: New Caledonia NER: Niger NFK: Norfolk Island NGA: Nigeria NIC: Nicaragua NIU: Niue NLD: Netherlands NOR: Norway NPL: Nepal NRU: Nauru NZL: New Zealand OMN: Oman PAK: Pakistan PAN: Panama PCN: Pitcairn PER: Peru PHL: Philippines PLW: Palau PNG: Papua New Guinea POL: Poland PRI: Puerto Rico PRK: Korea, Democratic People's Republic of PRT: Portugal PRY: Paraguay PSE: Palestinian Territory, Occupied PYF: French Polynesia QAT: Qatar REU: Reunion ROU: Romania RUS: Russian Federation RWA: Rwanda SAU: Saudi Arabia SDN: Sudan SEN: Senegal SGP: Singapore SGS: South Georgia and the South Sandwich Islands SHN: Saint Helena, Ascension and Tristan da Cunha SJM: Svalbard and Jan Mayen SLB: Solomon Islands SLE: Sierra Leone SLV: El Salvador SMR: San Marino SOM: Somalia SPM: Saint Pierre and Miquelon SRB: Serbia SSD: South Sudan STP: Sao Tome and Principe SUR: Suriname SVK: Slovakia SVN: Slovenia SWE: Sweden SWZ: Swaziland SXM: Sint Maarten (Dutch part) SYC: Seychelles SYR: Syrian Arab Republic TCA: Turks and Caicos Islands TCD: Chad TGO: Togo THA: Thailand TJK: Tajikistan TKL: Tokelau TKM: Turkmenistan TLS: Timor-Leste TON: Tonga TTO: Trinidad and Tobago TUN: Tunisia TUR: Turkey TUV: Tuvalu TWN: Taiwan, Province of China TZA: Tanzania, United Republic of UGA: Uganda UKR: Ukraine UMI: United States Minor Outlying Islands URY: Uruguay USA: United States UZB: Uzbekistan VAT: Holy See (Vatican City State) VCT: Saint Vincent and the Grenadines VEN: Venezuela, Bolivarian Republic of VGB: Virgin Islands, British VIR: Virgin Islands, U.S. VNM: Viet Nam VUT: Vanuatu WLF: Wallis and Futuna WSM: Samoa YEM: Yemen ZAF: South Africa ZMB: Zambia ZWE: Zimbabwe EEC: European Union AAA: International</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>class Countries(Enum):\n    \"\"\"Attributes:\n    ABW: Aruba\n    AFG: Afghanistan\n    AGO: Angola\n    AIA: Anguilla\n    ALA: Aland Islands\n    ALB: Albania\n    AND: Andorra\n    ARE: United Arab Emirates\n    ARG: Argentina\n    ARM: Armenia\n    ASM: American Samoa\n    ATA: Antarctica\n    ATF: French Southern Territories\n    ATG: Antigua and Barbuda\n    AUS: Australia\n    AUT: Austria\n    AZE: Azerbaijan\n    BDI: Burundi\n    BEL: Belgium\n    BEN: Benin\n    BES: Bonaire, Sint Eustatius and Saba\n    BFA: Burkina Faso\n    BGD: Bangladesh\n    BGR: Bulgaria\n    BHR: Bahrain\n    BHS: Bahamas\n    BIH: Bosnia and Herzegovina\n    BLM: Saint Barthelemy\n    BLR: Belarus\n    BLZ: Belize\n    BMU: Bermuda\n    BOL: Bolivia, Plurinational State of\n    BRA: Brazil\n    BRB: Barbados\n    BRN: Brunei Darussalam\n    BTN: Bhutan\n    BVT: Bouvet Island\n    BWA: Botswana\n    CAF: Central African Republic\n    CAN: Canada\n    CCK: Cocos (Keeling) Islands\n    CHE: Switzerland\n    CHL: Chile\n    CHN: China\n    CIV: Cote d'Ivoire\n    CMR: Cameroon\n    COD: Congo, the Democratic Republic of the\n    COG: Congo\n    COK: Cook Islands\n    COL: Colombia\n    COM: Comoros\n    CPV: Cape Verde\n    CRI: Costa Rica\n    CUB: Cuba\n    CUW: Curacao\n    CXR: Christmas Island\n    CYM: Cayman Islands\n    CYP: Cyprus\n    CZE: Czech Republic\n    DEU: Germany\n    DJI: Djibouti\n    DMA: Dominica\n    DNK: Denmark\n    DOM: Dominican Republic\n    DZA: Algeria\n    ECU: Ecuador\n    EGY: Egypt\n    ERI: Eritrea\n    ESH: Western Sahara\n    ESP: Spain\n    EST: Estonia\n    ETH: Ethiopia\n    FIN: Finland\n    FJI: Fiji\n    FLK: Falkland Islands (Malvinas)\n    FRA: France\n    FRO: Faroe Islands\n    FSM: Micronesia, Federated States of\n    GAB: Gabon\n    GBR: United Kingdom\n    GEO: Georgia\n    GGY: Guernsey\n    GHA: Ghana\n    GIB: Gibraltar\n    GIN: Guinea\n    GLP: Guadeloupe\n    GMB: Gambia\n    GNB: Guinea-Bissau\n    GNQ: Equatorial Guinea\n    GRC: Greece\n    GRD: Grenada\n    GRL: Greenland\n    GTM: Guatemala\n    GUF: French Guiana\n    GUM: Guam\n    GUY: Guyana\n    HKG: Hong Kong\n    HMD: Heard Island and McDonald Islands\n    HND: Honduras\n    HRV: Croatia\n    HTI: Haiti\n    HUN: Hungary\n    IDN: Indonesia\n    IMN: Isle of Man\n    IND: India\n    IOT: British Indian Ocean Territory\n    IRL: Ireland\n    IRN: Iran, Islamic Republic of\n    IRQ: Iraq\n    ISL: Iceland\n    ISR: Israel\n    ITA: Italy\n    JAM: Jamaica\n    JEY: Jersey\n    JOR: Jordan\n    JPN: Japan\n    KAZ: Kazakhstan\n    KEN: Kenya\n    KGZ: Kyrgyzstan\n    KHM: Cambodia\n    KIR: Kiribati\n    KNA: Saint Kitts and Nevis\n    KOR: Korea, Republic of\n    KWT: Kuwait\n    LAO: Lao People's Democratic Republic\n    LBN: Lebanon\n    LBR: Liberia\n    LBY: Libya\n    LCA: Saint Lucia\n    LIE: Liechtenstein\n    LKA: Sri Lanka\n    LSO: Lesotho\n    LTU: Lithuania\n    LUX: Luxembourg\n    LVA: Latvia\n    MAC: Macao\n    MAF: Saint Martin (French part)\n    MAR: Morocco\n    MCO: Monaco\n    MDA: Moldova, Republic of\n    MDG: Madagascar\n    MDV: Maldives\n    MEX: Mexico\n    MHL: Marshall Islands\n    MKD: Macedonia, the former Yugoslav Republic of\n    MLI: Mali\n    MLT: Malta\n    MMR: Myanmar\n    MNE: Montenegro\n    MNG: Mongolia\n    MNP: Northern Mariana Islands\n    MOZ: Mozambique\n    MRT: Mauritania\n    MSR: Montserrat\n    MTQ: Martinique\n    MUS: Mauritius\n    MWI: Malawi\n    MYS: Malaysia\n    MYT: Mayotte\n    NAM: Namibia\n    NCL: New Caledonia\n    NER: Niger\n    NFK: Norfolk Island\n    NGA: Nigeria\n    NIC: Nicaragua\n    NIU: Niue\n    NLD: Netherlands\n    NOR: Norway\n    NPL: Nepal\n    NRU: Nauru\n    NZL: New Zealand\n    OMN: Oman\n    PAK: Pakistan\n    PAN: Panama\n    PCN: Pitcairn\n    PER: Peru\n    PHL: Philippines\n    PLW: Palau\n    PNG: Papua New Guinea\n    POL: Poland\n    PRI: Puerto Rico\n    PRK: Korea, Democratic People's Republic of\n    PRT: Portugal\n    PRY: Paraguay\n    PSE: Palestinian Territory, Occupied\n    PYF: French Polynesia\n    QAT: Qatar\n    REU: Reunion\n    ROU: Romania\n    RUS: Russian Federation\n    RWA: Rwanda\n    SAU: Saudi Arabia\n    SDN: Sudan\n    SEN: Senegal\n    SGP: Singapore\n    SGS: South Georgia and the South Sandwich Islands\n    SHN: Saint Helena, Ascension and Tristan da Cunha\n    SJM: Svalbard and Jan Mayen\n    SLB: Solomon Islands\n    SLE: Sierra Leone\n    SLV: El Salvador\n    SMR: San Marino\n    SOM: Somalia\n    SPM: Saint Pierre and Miquelon\n    SRB: Serbia\n    SSD: South Sudan\n    STP: Sao Tome and Principe\n    SUR: Suriname\n    SVK: Slovakia\n    SVN: Slovenia\n    SWE: Sweden\n    SWZ: Swaziland\n    SXM: Sint Maarten (Dutch part)\n    SYC: Seychelles\n    SYR: Syrian Arab Republic\n    TCA: Turks and Caicos Islands\n    TCD: Chad\n    TGO: Togo\n    THA: Thailand\n    TJK: Tajikistan\n    TKL: Tokelau\n    TKM: Turkmenistan\n    TLS: Timor-Leste\n    TON: Tonga\n    TTO: Trinidad and Tobago\n    TUN: Tunisia\n    TUR: Turkey\n    TUV: Tuvalu\n    TWN: Taiwan, Province of China\n    TZA: Tanzania, United Republic of\n    UGA: Uganda\n    UKR: Ukraine\n    UMI: United States Minor Outlying Islands\n    URY: Uruguay\n    USA: United States\n    UZB: Uzbekistan\n    VAT: Holy See (Vatican City State)\n    VCT: Saint Vincent and the Grenadines\n    VEN: Venezuela, Bolivarian Republic of\n    VGB: Virgin Islands, British\n    VIR: Virgin Islands, U.S.\n    VNM: Viet Nam\n    VUT: Vanuatu\n    WLF: Wallis and Futuna\n    WSM: Samoa\n    YEM: Yemen\n    ZAF: South Africa\n    ZMB: Zambia\n    ZWE: Zimbabwe\n    EEC: European Union\n    AAA: International\n    \"\"\"\n\n    ABW = \"ABW\"\n    AFG = \"AFG\"\n    AGO = \"AGO\"\n    AIA = \"AIA\"\n    ALA = \"ALA\"\n    ALB = \"ALB\"\n    AND = \"AND\"\n    ARE = \"ARE\"\n    ARG = \"ARG\"\n    ARM = \"ARM\"\n    ASM = \"ASM\"\n    ATA = \"ATA\"\n    ATF = \"ATF\"\n    ATG = \"ATG\"\n    AUS = \"AUS\"\n    AUT = \"AUT\"\n    AZE = \"AZE\"\n    BDI = \"BDI\"\n    BEL = \"BEL\"\n    BEN = \"BEN\"\n    BES = \"BES\"\n    BFA = \"BFA\"\n    BGD = \"BGD\"\n    BGR = \"BGR\"\n    BHR = \"BHR\"\n    BHS = \"BHS\"\n    BIH = \"BIH\"\n    BLM = \"BLM\"\n    BLR = \"BLR\"\n    BLZ = \"BLZ\"\n    BMU = \"BMU\"\n    BOL = \"BOL\"\n    BRA = \"BRA\"\n    BRB = \"BRB\"\n    BRN = \"BRN\"\n    BTN = \"BTN\"\n    BVT = \"BVT\"\n    BWA = \"BWA\"\n    CAF = \"CAF\"\n    CAN = \"CAN\"\n    CCK = \"CCK\"\n    CHE = \"CHE\"\n    CHL = \"CHL\"\n    CHN = \"CHN\"\n    CIV = \"CIV\"\n    CMR = \"CMR\"\n    COD = \"COD\"\n    COG = \"COG\"\n    COK = \"COK\"\n    COL = \"COL\"\n    COM = \"COM\"\n    CPV = \"CPV\"\n    CRI = \"CRI\"\n    CUB = \"CUB\"\n    CUW = \"CUW\"\n    CXR = \"CXR\"\n    CYM = \"CYM\"\n    CYP = \"CYP\"\n    CZE = \"CZE\"\n    DEU = \"DEU\"\n    DJI = \"DJI\"\n    DMA = \"DMA\"\n    DNK = \"DNK\"\n    DOM = \"DOM\"\n    DZA = \"DZA\"\n    ECU = \"ECU\"\n    EGY = \"EGY\"\n    ERI = \"ERI\"\n    ESH = \"ESH\"\n    ESP = \"ESP\"\n    EST = \"EST\"\n    ETH = \"ETH\"\n    FIN = \"FIN\"\n    FJI = \"FJI\"\n    FLK = \"FLK\"\n    FRA = \"FRA\"\n    FRO = \"FRO\"\n    FSM = \"FSM\"\n    GAB = \"GAB\"\n    GBR = \"GBR\"\n    GEO = \"GEO\"\n    GGY = \"GGY\"\n    GHA = \"GHA\"\n    GIB = \"GIB\"\n    GIN = \"GIN\"\n    GLP = \"GLP\"\n    GMB = \"GMB\"\n    GNB = \"GNB\"\n    GNQ = \"GNQ\"\n    GRC = \"GRC\"\n    GRD = \"GRD\"\n    GRL = \"GRL\"\n    GTM = \"GTM\"\n    GUF = \"GUF\"\n    GUM = \"GUM\"\n    GUY = \"GUY\"\n    HKG = \"HKG\"\n    HMD = \"HMD\"\n    HND = \"HND\"\n    HRV = \"HRV\"\n    HTI = \"HTI\"\n    HUN = \"HUN\"\n    IDN = \"IDN\"\n    IMN = \"IMN\"\n    IND = \"IND\"\n    IOT = \"IOT\"\n    IRL = \"IRL\"\n    IRN = \"IRN\"\n    IRQ = \"IRQ\"\n    ISL = \"ISL\"\n    ISR = \"ISR\"\n    ITA = \"ITA\"\n    JAM = \"JAM\"\n    JEY = \"JEY\"\n    JOR = \"JOR\"\n    JPN = \"JPN\"\n    KAZ = \"KAZ\"\n    KEN = \"KEN\"\n    KGZ = \"KGZ\"\n    KHM = \"KHM\"\n    KIR = \"KIR\"\n    KNA = \"KNA\"\n    KOR = \"KOR\"\n    KWT = \"KWT\"\n    LAO = \"LAO\"\n    LBN = \"LBN\"\n    LBR = \"LBR\"\n    LBY = \"LBY\"\n    LCA = \"LCA\"\n    LIE = \"LIE\"\n    LKA = \"LKA\"\n    LSO = \"LSO\"\n    LTU = \"LTU\"\n    LUX = \"LUX\"\n    LVA = \"LVA\"\n    MAC = \"MAC\"\n    MAF = \"MAF\"\n    MAR = \"MAR\"\n    MCO = \"MCO\"\n    MDA = \"MDA\"\n    MDG = \"MDG\"\n    MDV = \"MDV\"\n    MEX = \"MEX\"\n    MHL = \"MHL\"\n    MKD = \"MKD\"\n    MLI = \"MLI\"\n    MLT = \"MLT\"\n    MMR = \"MMR\"\n    MNE = \"MNE\"\n    MNG = \"MNG\"\n    MNP = \"MNP\"\n    MOZ = \"MOZ\"\n    MRT = \"MRT\"\n    MSR = \"MSR\"\n    MTQ = \"MTQ\"\n    MUS = \"MUS\"\n    MWI = \"MWI\"\n    MYS = \"MYS\"\n    MYT = \"MYT\"\n    NAM = \"NAM\"\n    NCL = \"NCL\"\n    NER = \"NER\"\n    NFK = \"NFK\"\n    NGA = \"NGA\"\n    NIC = \"NIC\"\n    NIU = \"NIU\"\n    NLD = \"NLD\"\n    NOR = \"NOR\"\n    NPL = \"NPL\"\n    NRU = \"NRU\"\n    NZL = \"NZL\"\n    OMN = \"OMN\"\n    PAK = \"PAK\"\n    PAN = \"PAN\"\n    PCN = \"PCN\"\n    PER = \"PER\"\n    PHL = \"PHL\"\n    PLW = \"PLW\"\n    PNG = \"PNG\"\n    POL = \"POL\"\n    PRI = \"PRI\"\n    PRK = \"PRK\"\n    PRT = \"PRT\"\n    PRY = \"PRY\"\n    PSE = \"PSE\"\n    PYF = \"PYF\"\n    QAT = \"QAT\"\n    REU = \"REU\"\n    ROU = \"ROU\"\n    RUS = \"RUS\"\n    RWA = \"RWA\"\n    SAU = \"SAU\"\n    SDN = \"SDN\"\n    SEN = \"SEN\"\n    SGP = \"SGP\"\n    SGS = \"SGS\"\n    SHN = \"SHN\"\n    SJM = \"SJM\"\n    SLB = \"SLB\"\n    SLE = \"SLE\"\n    SLV = \"SLV\"\n    SMR = \"SMR\"\n    SOM = \"SOM\"\n    SPM = \"SPM\"\n    SRB = \"SRB\"\n    SSD = \"SSD\"\n    STP = \"STP\"\n    SUR = \"SUR\"\n    SVK = \"SVK\"\n    SVN = \"SVN\"\n    SWE = \"SWE\"\n    SWZ = \"SWZ\"\n    SXM = \"SXM\"\n    SYC = \"SYC\"\n    SYR = \"SYR\"\n    TCA = \"TCA\"\n    TCD = \"TCD\"\n    TGO = \"TGO\"\n    THA = \"THA\"\n    TJK = \"TJK\"\n    TKL = \"TKL\"\n    TKM = \"TKM\"\n    TLS = \"TLS\"\n    TON = \"TON\"\n    TTO = \"TTO\"\n    TUN = \"TUN\"\n    TUR = \"TUR\"\n    TUV = \"TUV\"\n    TWN = \"TWN\"\n    TZA = \"TZA\"\n    UGA = \"UGA\"\n    UKR = \"UKR\"\n    UMI = \"UMI\"\n    URY = \"URY\"\n    USA = \"USA\"\n    UZB = \"UZB\"\n    VAT = \"VAT\"\n    VCT = \"VCT\"\n    VEN = \"VEN\"\n    VGB = \"VGB\"\n    VIR = \"VIR\"\n    VNM = \"VNM\"\n    VUT = \"VUT\"\n    WLF = \"WLF\"\n    WSM = \"WSM\"\n    YEM = \"YEM\"\n    ZAF = \"ZAF\"\n    ZMB = \"ZMB\"\n    ZWE = \"ZWE\"\n    EEC = \"EEC\"\n    AAA = \"AAA\"\n</code></pre>"},{"location":"resources/#re3data._resources.DataAccess","title":"<code>DataAccess</code>  <code>dataclass</code>","text":"<p>Attributes: data_access_type: Type of access to data. data_access_restriction: All existing access restrictions to the research data. (Required if restricted     is chosen).</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass DataAccess:\n    \"\"\"Attributes:\n    data_access_type: Type of access to data.\n    data_access_restriction: All existing access restrictions to the research data. (Required if restricted\n        is chosen).\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    data_access_type: None | DataAccessTypes = field(\n        default=None,\n        metadata={\n            \"name\": \"dataAccessType\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    data_access_restriction: list[DataAccessRestrictions] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"dataAccessRestriction\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.DataLicense","title":"<code>DataLicense</code>  <code>dataclass</code>","text":"<p>Attributes: data_license_name: Name of the data license. data_license_url: Data license URL.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass DataLicense:\n    \"\"\"Attributes:\n    data_license_name: Name of the data license.\n    data_license_url: Data license URL.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    data_license_name: None | DataLicenseNames = field(\n        default=None,\n        metadata={\n            \"name\": \"dataLicenseName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    data_license_url: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"dataLicenseURL\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.DataUpload","title":"<code>DataUpload</code>  <code>dataclass</code>","text":"<p>Attributes: data_upload_type: Type of data upload. data_upload_restriction: All existing restrictions to the data upload. (Required if restricted is     chosen).</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass DataUpload:\n    \"\"\"Attributes:\n    data_upload_type: Type of data upload.\n    data_upload_restriction: All existing restrictions to the data upload. (Required if restricted is\n        chosen).\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    data_upload_type: None | AccessTypes = field(\n        default=None,\n        metadata={\n            \"name\": \"dataUploadType\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    data_upload_restriction: list[DataUploadRestrictions] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"dataUploadRestriction\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.DataUploadLicense","title":"<code>DataUploadLicense</code>  <code>dataclass</code>","text":"<p>Attributes: data_upload_license_name: Name of the license for data upload. data_upload_license_url: Data upload license URL.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass DataUploadLicense:\n    \"\"\"Attributes:\n    data_upload_license_name: Name of the license for data upload.\n    data_upload_license_url: Data upload license URL.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    data_upload_license_name: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"dataUploadLicenseName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    data_upload_license_url: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"dataUploadLicenseURL\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.DatabaseAccess","title":"<code>DatabaseAccess</code>  <code>dataclass</code>","text":"<p>Attributes: database_access_type: Type of access to the research data repository. database_access_restriction: All existing access restrictions to the research data repository. (Required     if restricted is chosen).</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass DatabaseAccess:\n    \"\"\"Attributes:\n    database_access_type: Type of access to the research data repository.\n    database_access_restriction: All existing access restrictions to the research data repository. (Required\n        if restricted is chosen).\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    database_access_type: None | AccessTypes = field(\n        default=None,\n        metadata={\n            \"name\": \"databaseAccessType\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    database_access_restriction: list[AccessRestrictions] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"databaseAccessRestriction\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.DatabaseLicense","title":"<code>DatabaseLicense</code>  <code>dataclass</code>","text":"<p>Attributes: database_license_name: Name of database license. database_license_url: Database license URL.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass DatabaseLicense:\n    \"\"\"Attributes:\n    database_license_name: Name of database license.\n    database_license_url: Database license URL.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    database_license_name: None | DatabaseLicenseNames = field(\n        default=None,\n        metadata={\n            \"name\": \"databaseLicenseName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    database_license_url: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"databaseLicenseURL\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Description","title":"<code>Description</code>  <code>dataclass</code>","text":"<p>Attributes: value: language: Language of the research data repository description.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass Description:\n    \"\"\"Attributes:\n    value:\n    language: Language of the research data repository description.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: str = field(\n        default=\"\",\n        metadata={\n            \"required\": True,\n            \"max_length\": 1000,\n        },\n    )\n    language: None | Languages = field(\n        default=None,\n        metadata={\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Institution","title":"<code>Institution</code>  <code>dataclass</code>","text":"<p>Attributes: institution_name: Name of the responsible institution. institution_additional_name: The alternative name or acronym for the responsible institution. institution_country: Location of the responsible institution. responsibility_type: Type of responsibility for each responsible institution. institution_type: Type of responsible institution. institution_url: URL of the responsible institution. institution_identifier: A globally unique identifier that refers to the institution (e.g. ISNI, VIAF,     GND). responsibility_start_date: Start date of period of responsibility. responsibility_end_date: End date of period of responsibility. institution_contact: Email address of the contact or an URL of an online contact form of the institution.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass Institution:\n    \"\"\"Attributes:\n    institution_name: Name of the responsible institution.\n    institution_additional_name: The alternative name or acronym for the responsible institution.\n    institution_country: Location of the responsible institution.\n    responsibility_type: Type of responsibility for each responsible institution.\n    institution_type: Type of responsible institution.\n    institution_url: URL of the responsible institution.\n    institution_identifier: A globally unique identifier that refers to the institution (e.g. ISNI, VIAF,\n        GND).\n    responsibility_start_date: Start date of period of responsibility.\n    responsibility_end_date: End date of period of responsibility.\n    institution_contact: Email address of the contact or an URL of an online contact form of the institution.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    institution_name: None | InstitutionName = field(\n        default=None,\n        metadata={\n            \"name\": \"institutionName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    institution_additional_name: list[InstitutionAdditionalName] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"institutionAdditionalName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    institution_country: None | Countries = field(\n        default=None,\n        metadata={\n            \"name\": \"institutionCountry\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    responsibility_type: list[ResponsibilityTypes] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"responsibilityType\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    institution_type: None | InstitutionTypes = field(\n        default=None,\n        metadata={\n            \"name\": \"institutionType\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    institution_url: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"institutionURL\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    institution_identifier: list[str] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"institutionIdentifier\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    # Note: Unfortunately, we had to add `str` type manually.\n    responsibility_start_date: None | XmlPeriod | XmlDate | str = field(\n        default=None,\n        metadata={\n            \"name\": \"responsibilityStartDate\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_inclusive\": XmlDate(1000, 1, 1),\n            \"max_inclusive\": XmlDate(2999, 12, 31),\n        },\n    )\n    # Note: Unfortunately, we had to add `str` type manually.\n    responsibility_end_date: None | XmlPeriod | XmlDate | str = field(\n        default=None,\n        metadata={\n            \"name\": \"responsibilityEndDate\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_inclusive\": XmlDate(1000, 1, 1),\n            \"max_inclusive\": XmlDate(2999, 12, 31),\n        },\n    )\n    institution_contact: list[str] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"institutionContact\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.InstitutionAdditionalName","title":"<code>InstitutionAdditionalName</code>  <code>dataclass</code>","text":"<p>Attributes: value: language: Language of the institution additional name.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass InstitutionAdditionalName:\n    \"\"\"Attributes:\n    value:\n    language: Language of the institution additional name.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: str = field(\n        default=\"\",\n        metadata={\n            \"required\": True,\n        },\n    )\n    language: None | Languages = field(\n        default=None,\n        metadata={\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.InstitutionName","title":"<code>InstitutionName</code>  <code>dataclass</code>","text":"<p>Attributes: value: language: Language of the institution name.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass InstitutionName:\n    \"\"\"Attributes:\n    value:\n    language: Language of the institution name.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: str = field(\n        default=\"\",\n        metadata={\n            \"required\": True,\n        },\n    )\n    language: None | Languages = field(\n        default=None,\n        metadata={\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Languages","title":"<code>Languages</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes: DEU: German ENG: English FRA: French AAR: Afar ABK: Abkhaz AFR: Afrikaans AKA: Akan AMH: Amharic ARA: Arabic ARG: Aragonese ASM: Assamese AVA: Avaric AVE: Avestan AYM: Aymara AZE: Azerbaijani BAK: Bashkir BAM: Bambara BEL: Belarusian BEN: Bengali BIS: Bislama BOD: Tibetan Standard, Tibetan, Central BOS: Bosnian BRE: Breton BUL: Bulgarian CAT: Catalan; Valencian CES: Czech CHA: Chamorro CHE: Chechen CHU: Old Church Slavonic, Church Slavic, Church Slavonic, Old Bulgarian, Old Slavonic CHV: Chuvash COR: Cornish COS: Corsican CRE: Cree CYM: Welsh DAN: Danish DIV: Divehi; Dhivehi; Maldivian; DZO: Dzongkha ELL: Greek, Modern EPO: Esperanto EST: Estonian EUS: Basque EWE: Ewe FAO: Faroese FAS: Persian FIJ: Fijian FIN: Finnish FRY: Western Frisian FUL: Fula; Fulah; Pulaar; Pular GLA: Scottish Gaelic; Gaelic GLE: Irish GLG: Galician GLV: Manx GRN: Guarani GUJ: Gujarati HAT: Haitian; Haitian Creole HAU: Hausa HEB: Hebrew (modern) HER: Herero HIN: Hindi HMO: Hiri Motu HRV: Croatian HUN: Hungarian HYE: Armenian IBO: Igbo IDO: Ido III: Nuosu IKU: Inuktitut ILE: Interlingue INA: Interlingua IND: Indonesian IPK: Inupiaq ISL: Icelandic ITA: Italian JAV: Javanese JPN: Japanese KAL: Kalaallisut, Greenlandic KAN: Kannada KAS: Kashmiri KAT: Georgian KAU: Kanuri KAZ: Kazakh KHM: Khmer KIK: Kikuyu, Gikuyu KIN: Kinyarwanda KIR: Kyrgyz KOM: Komi KON: Kongo KOR: Korean KUA: Kwanyama, Kuanyama KUR: Kurdish LAO: Lao LAT: Latin LAV: Latvian LIM: Limburgish, Limburgan, Limburger LIN: Lingala LIT: Lithuanian LTZ: Luxembourgish, Letzeburgesch LUB: Luba-Katanga LUG: Ganda MAH: Marshallese MAL: Malayalam MAR: Marathi MKD: Macedonian MLG: Malagasy MLT: Maltese MON: Mongolian MRI: Maori MSA: Malay MYA: Burmese NAU: Nauru NAV: Navajo, Navaho NBL: South Ndebele NDE: North Ndebele NDO: Ndonga NEP: Nepali NLD: Dutch NNO: Norwegian Nynorsk NOB: Norwegian Bokmal NOR: Norwegian NYA: Chichewa; Chewa; Nyanja OCI: Occitan OJI: Ojibwe, Ojibwa ORI: Oriya ORM: Oromo OSS: Ossetian, Ossetic PAN: Panjabi, Punjabi PLI: Pali POL: Polish POR: Portuguese PUS: Pashto, Pushto QUE: Quechua ROH: Romansh RON: Romanian, Moldavian(Romanian from Republic of Moldova) RUN: Kirundi RUS: Russian SAG: Sango SAN: Sanskrit (Samskrta) SIN: Sinhala, Sinhalese SLK: Slovak SLV: Slovene SME: Northern Sami SMO: Samoan SNA: Shona SND: Sindhi SOM: Somali SOT: Southern Sotho SPA: Spanish; Castilian SQI: Albanian SRD: Sardinian SRP: Serbian SSW: Swati SUN: Sundanese SWA: Swahili SWE: Swedish TAH: Tahitian TAM: Tamil TAT: Tatar TEL: Telugu TGK: Tajik TGL: Tagalog THA: Thai TIR: Tigrinya TON: Tonga (Tonga Islands) TSN: Tswana TSO: Tsonga TUK: Turkmen TUR: Turkish TWI: Twi UIG: Uighur, Uyghur UKR: Ukrainian URD: Urdu UZB: Uzbek VEN: Venda VIE: Vietnamese VOL: Volapuk WLN: Walloon WOL: Wolof XHO: Xhosa YID: Yiddish YOR: Yoruba ZHA: Zhuang, Chuang ZHO: Chinese ZUL: Zulu</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>class Languages(Enum):\n    \"\"\"Attributes:\n    DEU: German\n    ENG: English\n    FRA: French\n    AAR: Afar\n    ABK: Abkhaz\n    AFR: Afrikaans\n    AKA: Akan\n    AMH: Amharic\n    ARA: Arabic\n    ARG: Aragonese\n    ASM: Assamese\n    AVA: Avaric\n    AVE: Avestan\n    AYM: Aymara\n    AZE: Azerbaijani\n    BAK: Bashkir\n    BAM: Bambara\n    BEL: Belarusian\n    BEN: Bengali\n    BIS: Bislama\n    BOD: Tibetan Standard, Tibetan, Central\n    BOS: Bosnian\n    BRE: Breton\n    BUL: Bulgarian\n    CAT: Catalan; Valencian\n    CES: Czech\n    CHA: Chamorro\n    CHE: Chechen\n    CHU: Old Church Slavonic, Church Slavic, Church Slavonic, Old Bulgarian, Old Slavonic\n    CHV: Chuvash\n    COR: Cornish\n    COS: Corsican\n    CRE: Cree\n    CYM: Welsh\n    DAN: Danish\n    DIV: Divehi; Dhivehi; Maldivian;\n    DZO: Dzongkha\n    ELL: Greek, Modern\n    EPO: Esperanto\n    EST: Estonian\n    EUS: Basque\n    EWE: Ewe\n    FAO: Faroese\n    FAS: Persian\n    FIJ: Fijian\n    FIN: Finnish\n    FRY: Western Frisian\n    FUL: Fula; Fulah; Pulaar; Pular\n    GLA: Scottish Gaelic; Gaelic\n    GLE: Irish\n    GLG: Galician\n    GLV: Manx\n    GRN: Guarani\n    GUJ: Gujarati\n    HAT: Haitian; Haitian Creole\n    HAU: Hausa\n    HEB: Hebrew (modern)\n    HER: Herero\n    HIN: Hindi\n    HMO: Hiri Motu\n    HRV: Croatian\n    HUN: Hungarian\n    HYE: Armenian\n    IBO: Igbo\n    IDO: Ido\n    III: Nuosu\n    IKU: Inuktitut\n    ILE: Interlingue\n    INA: Interlingua\n    IND: Indonesian\n    IPK: Inupiaq\n    ISL: Icelandic\n    ITA: Italian\n    JAV: Javanese\n    JPN: Japanese\n    KAL: Kalaallisut, Greenlandic\n    KAN: Kannada\n    KAS: Kashmiri\n    KAT: Georgian\n    KAU: Kanuri\n    KAZ: Kazakh\n    KHM: Khmer\n    KIK: Kikuyu, Gikuyu\n    KIN: Kinyarwanda\n    KIR: Kyrgyz\n    KOM: Komi\n    KON: Kongo\n    KOR: Korean\n    KUA: Kwanyama, Kuanyama\n    KUR: Kurdish\n    LAO: Lao\n    LAT: Latin\n    LAV: Latvian\n    LIM: Limburgish, Limburgan, Limburger\n    LIN: Lingala\n    LIT: Lithuanian\n    LTZ: Luxembourgish, Letzeburgesch\n    LUB: Luba-Katanga\n    LUG: Ganda\n    MAH: Marshallese\n    MAL: Malayalam\n    MAR: Marathi\n    MKD: Macedonian\n    MLG: Malagasy\n    MLT: Maltese\n    MON: Mongolian\n    MRI: Maori\n    MSA: Malay\n    MYA: Burmese\n    NAU: Nauru\n    NAV: Navajo, Navaho\n    NBL: South Ndebele\n    NDE: North Ndebele\n    NDO: Ndonga\n    NEP: Nepali\n    NLD: Dutch\n    NNO: Norwegian Nynorsk\n    NOB: Norwegian Bokmal\n    NOR: Norwegian\n    NYA: Chichewa; Chewa; Nyanja\n    OCI: Occitan\n    OJI: Ojibwe, Ojibwa\n    ORI: Oriya\n    ORM: Oromo\n    OSS: Ossetian, Ossetic\n    PAN: Panjabi, Punjabi\n    PLI: Pali\n    POL: Polish\n    POR: Portuguese\n    PUS: Pashto, Pushto\n    QUE: Quechua\n    ROH: Romansh\n    RON: Romanian, Moldavian(Romanian from Republic of Moldova)\n    RUN: Kirundi\n    RUS: Russian\n    SAG: Sango\n    SAN: Sanskrit (Samskrta)\n    SIN: Sinhala, Sinhalese\n    SLK: Slovak\n    SLV: Slovene\n    SME: Northern Sami\n    SMO: Samoan\n    SNA: Shona\n    SND: Sindhi\n    SOM: Somali\n    SOT: Southern Sotho\n    SPA: Spanish; Castilian\n    SQI: Albanian\n    SRD: Sardinian\n    SRP: Serbian\n    SSW: Swati\n    SUN: Sundanese\n    SWA: Swahili\n    SWE: Swedish\n    TAH: Tahitian\n    TAM: Tamil\n    TAT: Tatar\n    TEL: Telugu\n    TGK: Tajik\n    TGL: Tagalog\n    THA: Thai\n    TIR: Tigrinya\n    TON: Tonga (Tonga Islands)\n    TSN: Tswana\n    TSO: Tsonga\n    TUK: Turkmen\n    TUR: Turkish\n    TWI: Twi\n    UIG: Uighur, Uyghur\n    UKR: Ukrainian\n    URD: Urdu\n    UZB: Uzbek\n    VEN: Venda\n    VIE: Vietnamese\n    VOL: Volapuk\n    WLN: Walloon\n    WOL: Wolof\n    XHO: Xhosa\n    YID: Yiddish\n    YOR: Yoruba\n    ZHA: Zhuang, Chuang\n    ZHO: Chinese\n    ZUL: Zulu\n    \"\"\"\n\n    DEU = \"deu\"\n    ENG = \"eng\"\n    FRA = \"fra\"\n    AAR = \"aar\"\n    ABK = \"abk\"\n    AFR = \"afr\"\n    AKA = \"aka\"\n    AMH = \"amh\"\n    ARA = \"ara\"\n    ARG = \"arg\"\n    ASM = \"asm\"\n    AVA = \"ava\"\n    AVE = \"ave\"\n    AYM = \"aym\"\n    AZE = \"aze\"\n    BAK = \"bak\"\n    BAM = \"bam\"\n    BEL = \"bel\"\n    BEN = \"ben\"\n    BIS = \"bis\"\n    BOD = \"bod\"\n    BOS = \"bos\"\n    BRE = \"bre\"\n    BUL = \"bul\"\n    CAT = \"cat\"\n    CES = \"ces\"\n    CHA = \"cha\"\n    CHE = \"che\"\n    CHU = \"chu\"\n    CHV = \"chv\"\n    COR = \"cor\"\n    COS = \"cos\"\n    CRE = \"cre\"\n    CYM = \"cym\"\n    DAN = \"dan\"\n    DIV = \"div\"\n    DZO = \"dzo\"\n    ELL = \"ell\"\n    EPO = \"epo\"\n    EST = \"est\"\n    EUS = \"eus\"\n    EWE = \"ewe\"\n    FAO = \"fao\"\n    FAS = \"fas\"\n    FIJ = \"fij\"\n    FIN = \"fin\"\n    FRY = \"fry\"\n    FUL = \"ful\"\n    GLA = \"gla\"\n    GLE = \"gle\"\n    GLG = \"glg\"\n    GLV = \"glv\"\n    GRN = \"grn\"\n    GUJ = \"guj\"\n    HAT = \"hat\"\n    HAU = \"hau\"\n    HEB = \"heb\"\n    HER = \"her\"\n    HIN = \"hin\"\n    HMO = \"hmo\"\n    HRV = \"hrv\"\n    HUN = \"hun\"\n    HYE = \"hye\"\n    IBO = \"ibo\"\n    IDO = \"ido\"\n    III = \"iii\"\n    IKU = \"iku\"\n    ILE = \"ile\"\n    INA = \"ina\"\n    IND = \"ind\"\n    IPK = \"ipk\"\n    ISL = \"isl\"\n    ITA = \"ita\"\n    JAV = \"jav\"\n    JPN = \"jpn\"\n    KAL = \"kal\"\n    KAN = \"kan\"\n    KAS = \"kas\"\n    KAT = \"kat\"\n    KAU = \"kau\"\n    KAZ = \"kaz\"\n    KHM = \"khm\"\n    KIK = \"kik\"\n    KIN = \"kin\"\n    KIR = \"kir\"\n    KOM = \"kom\"\n    KON = \"kon\"\n    KOR = \"kor\"\n    KUA = \"kua\"\n    KUR = \"kur\"\n    LAO = \"lao\"\n    LAT = \"lat\"\n    LAV = \"lav\"\n    LIM = \"lim\"\n    LIN = \"lin\"\n    LIT = \"lit\"\n    LTZ = \"ltz\"\n    LUB = \"lub\"\n    LUG = \"lug\"\n    MAH = \"mah\"\n    MAL = \"mal\"\n    MAR = \"mar\"\n    MKD = \"mkd\"\n    MLG = \"mlg\"\n    MLT = \"mlt\"\n    MON = \"mon\"\n    MRI = \"mri\"\n    MSA = \"msa\"\n    MYA = \"mya\"\n    NAU = \"nau\"\n    NAV = \"nav\"\n    NBL = \"nbl\"\n    NDE = \"nde\"\n    NDO = \"ndo\"\n    NEP = \"nep\"\n    NLD = \"nld\"\n    NNO = \"nno\"\n    NOB = \"nob\"\n    NOR = \"nor\"\n    NYA = \"nya\"\n    OCI = \"oci\"\n    OJI = \"oji\"\n    ORI = \"ori\"\n    ORM = \"orm\"\n    OSS = \"oss\"\n    PAN = \"pan\"\n    PLI = \"pli\"\n    POL = \"pol\"\n    POR = \"por\"\n    PUS = \"pus\"\n    QUE = \"que\"\n    ROH = \"roh\"\n    RON = \"ron\"\n    RUN = \"run\"\n    RUS = \"rus\"\n    SAG = \"sag\"\n    SAN = \"san\"\n    SIN = \"sin\"\n    SLK = \"slk\"\n    SLV = \"slv\"\n    SME = \"sme\"\n    SMO = \"smo\"\n    SNA = \"sna\"\n    SND = \"snd\"\n    SOM = \"som\"\n    SOT = \"sot\"\n    SPA = \"spa\"\n    SQI = \"sqi\"\n    SRD = \"srd\"\n    SRP = \"srp\"\n    SSW = \"ssw\"\n    SUN = \"sun\"\n    SWA = \"swa\"\n    SWE = \"swe\"\n    TAH = \"tah\"\n    TAM = \"tam\"\n    TAT = \"tat\"\n    TEL = \"tel\"\n    TGK = \"tgk\"\n    TGL = \"tgl\"\n    THA = \"tha\"\n    TIR = \"tir\"\n    TON = \"ton\"\n    TSN = \"tsn\"\n    TSO = \"tso\"\n    TUK = \"tuk\"\n    TUR = \"tur\"\n    TWI = \"twi\"\n    UIG = \"uig\"\n    UKR = \"ukr\"\n    URD = \"urd\"\n    UZB = \"uzb\"\n    VEN = \"ven\"\n    VIE = \"vie\"\n    VOL = \"vol\"\n    WLN = \"wln\"\n    WOL = \"wol\"\n    XHO = \"xho\"\n    YID = \"yid\"\n    YOR = \"yor\"\n    ZHA = \"zha\"\n    ZHO = \"zho\"\n    ZUL = \"zul\"\n</code></pre>"},{"location":"resources/#re3data._resources.MetadataStandard","title":"<code>MetadataStandard</code>  <code>dataclass</code>","text":"<p>Attributes: metadata_standard_name: Metadata standards the research data repository complies with. metadata_standard_url: The URL of the metadata standard.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass MetadataStandard:\n    \"\"\"Attributes:\n    metadata_standard_name: Metadata standards the research data repository complies with.\n    metadata_standard_url: The URL of the metadata standard.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    metadata_standard_name: None | MetadataStandardName = field(\n        default=None,\n        metadata={\n            \"name\": \"metadataStandardName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    metadata_standard_url: None | MetadataStandardDccurls = field(\n        default=None,\n        metadata={\n            \"name\": \"metadataStandardURL\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.MetadataStandardDccnames","title":"<code>MetadataStandardDccnames</code>","text":"<p>               Bases: <code>Enum</code></p> <p>ABCD_ACCESS_TO_BIOLOGICAL_COLLECTION_DATA: http://www.dcc.ac.uk/resources/metadata-standards/abcd-access-     biological-collection-data AG_MES_AGRICULTURAL_METADATA_ELEMENT_SET: http://www.dcc.ac.uk/resources/metadata-standards/agmes-     agricultural-metadata-element-set AVM_ASTRONOMY_VISUALIZATION_METADATA: http://www.dcc.ac.uk/resources/metadata-standards/avm-astronomy-     visualization-metadata CF_CLIMATE_AND_FORECAST_METADATA_CONVENTIONS: http://www.dcc.ac.uk/resources/metadata-standards/cf-     climate-and-forecast-metadata-conventions CIF_CRYSTALLOGRAPHIC_INFORMATION_FRAMEWORK: http://www.dcc.ac.uk/resources/metadata-standards/cif-     crystallographic-information-framework CIM_COMMON_INFORMATION_MODEL: http://www.dcc.ac.uk/resources/metadata-standards/cim-common-information-     model CSMD_CCLRC_CORE_SCIENTIFIC_METADATA_MODEL: http://www.dcc.ac.uk/resources/metadata-standards/csmd-cclrc-     core-scientific-metadata-model DARWIN_CORE: http://www.dcc.ac.uk/resources/metadata-standards/darwin-core DATA_CITE_METADATA_SCHEMA: http://www.dcc.ac.uk/resources/metadata-standards/datacite-metadata-schema DCAT_DATA_CATALOG_VOCABULARY: http://www.dcc.ac.uk/resources/metadata-standards/dcat-data-catalog-     vocabulary DDI_DATA_DOCUMENTATION_INITIATIVE: http://www.dcc.ac.uk/resources/metadata-standards/ddi-data-     documentation-initiative DIF_DIRECTORY_INTERCHANGE_FORMAT: http://www.dcc.ac.uk/resources/metadata-standards/dif-directory-     interchange-format DUBLIN_CORE: http://www.dcc.ac.uk/resources/metadata-standards/dublin-core EML_ECOLOGICAL_METADATA_LANGUAGE: http://www.dcc.ac.uk/resources/metadata-standards/eml-ecological-     metadata-language FGDC_CSDGM_FEDERAL_GEOGRAPHIC_DATA_COMMITTEE_CONTENT_STANDARD_FOR_DIGITAL_GEOSPATIAL_METADATA:     http://www.dcc.ac.uk/resources/metadata-standards/fgdccsdgm-federal-geographic-data-committee-     content-standard-digital-ge FITS_FLEXIBLE_IMAGE_TRANSPORT_SYSTEM: http://www.dcc.ac.uk/resources/metadata-standards/fits-flexible-     image-transport-system GENOME_METADATA: http://www.dcc.ac.uk/resources/metadata-standards/genome-metadata INTERNATIONAL_VIRTUAL_OBSERVATORY_ALLIANCE_TECHNICAL_SPECIFICATIONS:     http://www.dcc.ac.uk/resources/metadata-standards/international-virtual-observatory-alliance-     technical-specifications ISA_TAB: http://www.dcc.ac.uk/resources/metadata-standards/isa-tab ISO_19115: http://www.dcc.ac.uk/resources/metadata-standards/iso-19115 MIBBI_MINIMUM_INFORMATION_FOR_BIOLOGICAL_AND_BIOMEDICAL_INVESTIGATIONS:     http://www.dcc.ac.uk/resources/metadata-standards/mibbi-minimum-information-biological-and-     biomedical-investigations MIDAS_HERITAGE: http://www.dcc.ac.uk/resources/metadata-standards/midas-heritage OAI_ORE_OPEN_ARCHIVES_INITIATIVE_OBJECT_REUSE_AND_EXCHANGE: http://www.dcc.ac.uk/resources/metadata-     standards/oai-ore-open-archives-initiative-object-reuse-and-exchange OBSERV_OM: http://www.dcc.ac.uk/resources/metadata-standards/observ-om OBSERVATIONS_AND_MEASUREMENTS: http://www.dcc.ac.uk/resources/metadata-standards/observations-and-     measurements OME_XML_OPEN_MICROSCOPY_ENVIRONMENT_XML: http://www.dcc.ac.uk/resources/metadata-standards/ome-xml-open-     microscopy-environment-xml PROTOCOL_DATA_ELEMENT_DEFINITIONS: http://www.dcc.ac.uk/resources/metadata-standards/protocol-data-     element-definitions PROV: http://www.dcc.ac.uk/resources/metadata-standards/prov QU_DEX_QUALITATIVE_DATA_EXCHANGE_FORMAT: http://www.dcc.ac.uk/resources/metadata-standards/qudex-     qualitative-data-exchange-format RDF_DATA_CUBE_VOCABULARY: http://www.dcc.ac.uk/resources/metadata-standards/rdf-data-cube-vocabulary REPOSITORY_DEVELOPED_METADATA_SCHEMAS: http://www.dcc.ac.uk/resources/metadata-standards/repository-     developed-metadata-schemas SDMX_STATISTICAL_DATA_AND_METADATA_EXCHANGE: http://www.dcc.ac.uk/resources/metadata-standards/sdmx-     statistical-data-and-metadata-exchange SPASE_DATA_MODEL: http://www.dcc.ac.uk/resources/metadata-standards/spase-data-model OTHER: other</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>class MetadataStandardDccnames(Enum):\n    \"\"\"Attributes:\n    ABCD_ACCESS_TO_BIOLOGICAL_COLLECTION_DATA: http://www.dcc.ac.uk/resources/metadata-standards/abcd-access-\n        biological-collection-data\n    AG_MES_AGRICULTURAL_METADATA_ELEMENT_SET: http://www.dcc.ac.uk/resources/metadata-standards/agmes-\n        agricultural-metadata-element-set\n    AVM_ASTRONOMY_VISUALIZATION_METADATA: http://www.dcc.ac.uk/resources/metadata-standards/avm-astronomy-\n        visualization-metadata\n    CF_CLIMATE_AND_FORECAST_METADATA_CONVENTIONS: http://www.dcc.ac.uk/resources/metadata-standards/cf-\n        climate-and-forecast-metadata-conventions\n    CIF_CRYSTALLOGRAPHIC_INFORMATION_FRAMEWORK: http://www.dcc.ac.uk/resources/metadata-standards/cif-\n        crystallographic-information-framework\n    CIM_COMMON_INFORMATION_MODEL: http://www.dcc.ac.uk/resources/metadata-standards/cim-common-information-\n        model\n    CSMD_CCLRC_CORE_SCIENTIFIC_METADATA_MODEL: http://www.dcc.ac.uk/resources/metadata-standards/csmd-cclrc-\n        core-scientific-metadata-model\n    DARWIN_CORE: http://www.dcc.ac.uk/resources/metadata-standards/darwin-core\n    DATA_CITE_METADATA_SCHEMA: http://www.dcc.ac.uk/resources/metadata-standards/datacite-metadata-schema\n    DCAT_DATA_CATALOG_VOCABULARY: http://www.dcc.ac.uk/resources/metadata-standards/dcat-data-catalog-\n        vocabulary\n    DDI_DATA_DOCUMENTATION_INITIATIVE: http://www.dcc.ac.uk/resources/metadata-standards/ddi-data-\n        documentation-initiative\n    DIF_DIRECTORY_INTERCHANGE_FORMAT: http://www.dcc.ac.uk/resources/metadata-standards/dif-directory-\n        interchange-format\n    DUBLIN_CORE: http://www.dcc.ac.uk/resources/metadata-standards/dublin-core\n    EML_ECOLOGICAL_METADATA_LANGUAGE: http://www.dcc.ac.uk/resources/metadata-standards/eml-ecological-\n        metadata-language\n    FGDC_CSDGM_FEDERAL_GEOGRAPHIC_DATA_COMMITTEE_CONTENT_STANDARD_FOR_DIGITAL_GEOSPATIAL_METADATA:\n        http://www.dcc.ac.uk/resources/metadata-standards/fgdccsdgm-federal-geographic-data-committee-\n        content-standard-digital-ge\n    FITS_FLEXIBLE_IMAGE_TRANSPORT_SYSTEM: http://www.dcc.ac.uk/resources/metadata-standards/fits-flexible-\n        image-transport-system\n    GENOME_METADATA: http://www.dcc.ac.uk/resources/metadata-standards/genome-metadata\n    INTERNATIONAL_VIRTUAL_OBSERVATORY_ALLIANCE_TECHNICAL_SPECIFICATIONS:\n        http://www.dcc.ac.uk/resources/metadata-standards/international-virtual-observatory-alliance-\n        technical-specifications\n    ISA_TAB: http://www.dcc.ac.uk/resources/metadata-standards/isa-tab\n    ISO_19115: http://www.dcc.ac.uk/resources/metadata-standards/iso-19115\n    MIBBI_MINIMUM_INFORMATION_FOR_BIOLOGICAL_AND_BIOMEDICAL_INVESTIGATIONS:\n        http://www.dcc.ac.uk/resources/metadata-standards/mibbi-minimum-information-biological-and-\n        biomedical-investigations\n    MIDAS_HERITAGE: http://www.dcc.ac.uk/resources/metadata-standards/midas-heritage\n    OAI_ORE_OPEN_ARCHIVES_INITIATIVE_OBJECT_REUSE_AND_EXCHANGE: http://www.dcc.ac.uk/resources/metadata-\n        standards/oai-ore-open-archives-initiative-object-reuse-and-exchange\n    OBSERV_OM: http://www.dcc.ac.uk/resources/metadata-standards/observ-om\n    OBSERVATIONS_AND_MEASUREMENTS: http://www.dcc.ac.uk/resources/metadata-standards/observations-and-\n        measurements\n    OME_XML_OPEN_MICROSCOPY_ENVIRONMENT_XML: http://www.dcc.ac.uk/resources/metadata-standards/ome-xml-open-\n        microscopy-environment-xml\n    PROTOCOL_DATA_ELEMENT_DEFINITIONS: http://www.dcc.ac.uk/resources/metadata-standards/protocol-data-\n        element-definitions\n    PROV: http://www.dcc.ac.uk/resources/metadata-standards/prov\n    QU_DEX_QUALITATIVE_DATA_EXCHANGE_FORMAT: http://www.dcc.ac.uk/resources/metadata-standards/qudex-\n        qualitative-data-exchange-format\n    RDF_DATA_CUBE_VOCABULARY: http://www.dcc.ac.uk/resources/metadata-standards/rdf-data-cube-vocabulary\n    REPOSITORY_DEVELOPED_METADATA_SCHEMAS: http://www.dcc.ac.uk/resources/metadata-standards/repository-\n        developed-metadata-schemas\n    SDMX_STATISTICAL_DATA_AND_METADATA_EXCHANGE: http://www.dcc.ac.uk/resources/metadata-standards/sdmx-\n        statistical-data-and-metadata-exchange\n    SPASE_DATA_MODEL: http://www.dcc.ac.uk/resources/metadata-standards/spase-data-model\n    OTHER: other\n    \"\"\"\n\n    ABCD_ACCESS_TO_BIOLOGICAL_COLLECTION_DATA = \"ABCD - Access to Biological Collection Data\"\n    AG_MES_AGRICULTURAL_METADATA_ELEMENT_SET = \"AgMES - Agricultural Metadata Element Set\"\n    AVM_ASTRONOMY_VISUALIZATION_METADATA = \"AVM - Astronomy Visualization Metadata\"\n    CF_CLIMATE_AND_FORECAST_METADATA_CONVENTIONS = \"CF (Climate and Forecast) Metadata Conventions\"\n    CIF_CRYSTALLOGRAPHIC_INFORMATION_FRAMEWORK = \"CIF - Crystallographic Information Framework\"\n    CIM_COMMON_INFORMATION_MODEL = \"CIM - Common Information Model\"\n    CSMD_CCLRC_CORE_SCIENTIFIC_METADATA_MODEL = \"CSMD-CCLRC Core Scientific Metadata Model\"\n    DARWIN_CORE = \"Darwin Core\"\n    DATA_CITE_METADATA_SCHEMA = \"DataCite Metadata Schema\"\n    DCAT_DATA_CATALOG_VOCABULARY = \"DCAT - Data Catalog Vocabulary\"\n    DDI_DATA_DOCUMENTATION_INITIATIVE = \"DDI - Data Documentation Initiative\"\n    DIF_DIRECTORY_INTERCHANGE_FORMAT = \"DIF - Directory Interchange Format\"\n    DUBLIN_CORE = \"Dublin Core\"\n    EML_ECOLOGICAL_METADATA_LANGUAGE = \"EML - Ecological Metadata Language\"\n    FGDC_CSDGM_FEDERAL_GEOGRAPHIC_DATA_COMMITTEE_CONTENT_STANDARD_FOR_DIGITAL_GEOSPATIAL_METADATA = (\n        \"FGDC/CSDGM - Federal Geographic Data Committee Content Standard for Digital Geospatial Metadata\"\n    )\n    FITS_FLEXIBLE_IMAGE_TRANSPORT_SYSTEM = \"FITS - Flexible Image Transport System\"\n    GENOME_METADATA = \"Genome Metadata\"\n    INTERNATIONAL_VIRTUAL_OBSERVATORY_ALLIANCE_TECHNICAL_SPECIFICATIONS = (\n        \"International Virtual Observatory Alliance Technical Specifications\"\n    )\n    ISA_TAB = \"ISA-Tab\"\n    ISO_19115 = \"ISO 19115\"\n    MIBBI_MINIMUM_INFORMATION_FOR_BIOLOGICAL_AND_BIOMEDICAL_INVESTIGATIONS = (\n        \"MIBBI - Minimum Information for Biological and Biomedical Investigations\"\n    )\n    MIDAS_HERITAGE = \"MIDAS-Heritage\"\n    OAI_ORE_OPEN_ARCHIVES_INITIATIVE_OBJECT_REUSE_AND_EXCHANGE = (\n        \"OAI-ORE - Open Archives Initiative Object Reuse and Exchange\"\n    )\n    OBSERV_OM = \"Observ-OM\"\n    OBSERVATIONS_AND_MEASUREMENTS = \"Observations and Measurements\"\n    OME_XML_OPEN_MICROSCOPY_ENVIRONMENT_XML = \"OME-XML - Open Microscopy Environment XML\"\n    PROTOCOL_DATA_ELEMENT_DEFINITIONS = \"Protocol Data Element Definitions\"\n    PROV = \"PROV\"\n    QU_DEX_QUALITATIVE_DATA_EXCHANGE_FORMAT = \"QuDEx - Qualitative Data Exchange Format\"\n    RDF_DATA_CUBE_VOCABULARY = \"RDF Data Cube Vocabulary\"\n    REPOSITORY_DEVELOPED_METADATA_SCHEMAS = \"Repository-Developed Metadata Schemas\"\n    SDMX_STATISTICAL_DATA_AND_METADATA_EXCHANGE = \"SDMX - Statistical Data and Metadata Exchange\"\n    SPASE_DATA_MODEL = \"SPASE Data Model\"\n    OTHER = \"other\"\n</code></pre>"},{"location":"resources/#re3data._resources.MetadataStandardDccurls","title":"<code>MetadataStandardDccurls</code>","text":"<p>               Bases: <code>Enum</code></p> <p>HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_ABCD_ACCESS_BIOLOGICAL_COLLECTION_DATA: ABCD - Access to     Biological Collection Data HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_AGMES_AGRICULTURAL_METADATA_ELEMENT_SET: AgMES -     Agricultural Metadata Element Set HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_AVM_ASTRONOMY_VISUALIZATION_METADATA: AVM - Astronomy     Visualization Metadata HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CF_CLIMATE_AND_FORECAST_METADATA_CONVENTIONS: CF (Climate     and Forecast) Metadata Conventions HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CIF_CRYSTALLOGRAPHIC_INFORMATION_FRAMEWORK: CIF -     Crystallographic Information Framework HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CIM_COMMON_INFORMATION_MODEL: CIM - Common Information     Model HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CSMD_CCLRC_CORE_SCIENTIFIC_METADATA_MODEL: CSMD-CCLRC     Core Scientific Metadata Model HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DARWIN_CORE: Darwin Core HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DATACITE_METADATA_SCHEMA: DataCite Metadata Schema HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DCAT_DATA_CATALOG_VOCABULARY: DCAT - Data Catalog     Vocabulary HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DDI_DATA_DOCUMENTATION_INITIATIVE: DDI - Data     Documentation Initiative HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DIF_DIRECTORY_INTERCHANGE_FORMAT: DIF - Directory     Interchange Format HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DUBLIN_CORE: Dublin Core HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_EML_ECOLOGICAL_METADATA_LANGUAGE: EML - Ecological     Metadata Language HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_FGDCCSDGM_FEDERAL_GEOGRAPHIC_DATA_COMMITTEE_CONTENT_STANDARD_DIGITAL_GE:     FGDC/CSDGM - Federal Geographic Data Committee Content Standard for Digital Geospatial Metadata HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_FITS_FLEXIBLE_IMAGE_TRANSPORT_SYSTEM: FITS - Flexible     Image Transport System HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_GENOME_METADATA: Genome Metadata HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_INTERNATIONAL_VIRTUAL_OBSERVATORY_ALLIANCE_TECHNICAL_SPECIFICATIONS:     International Virtual Observatory Alliance Technical Specifications HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_ISA_TAB: ISA-Tab HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_ISO_19115: ISO 19115 HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_MIBBI_MINIMUM_INFORMATION_BIOLOGICAL_AND_BIOMEDICAL_INVESTIGATIONS:     MIBBI - Minimum Information for Biological and Biomedical Investigations HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_MIDAS_HERITAGE: MIDAS-Heritage HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OAI_ORE_OPEN_ARCHIVES_INITIATIVE_OBJECT_REUSE_AND_EXCHANGE:     OAI-ORE - Open Archives Initiative Object Reuse and Exchange HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OBSERV_OM: Observ-OM HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OBSERVATIONS_AND_MEASUREMENTS: Observations and     Measurements HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OME_XML_OPEN_MICROSCOPY_ENVIRONMENT_XML: OME-XML - Open     Microscopy Environment XML HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_PROTOCOL_DATA_ELEMENT_DEFINITIONS: Protocol Data Element     Definitions HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_PROV: PROV HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_QUDEX_QUALITATIVE_DATA_EXCHANGE_FORMAT: QuDEx -     Qualitative Data Exchange Format HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_RDF_DATA_CUBE_VOCABULARY: RDF Data Cube Vocabulary HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_REPOSITORY_DEVELOPED_METADATA_SCHEMAS: Repository-     Developed Metadata Schemas HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_SDMX_STATISTICAL_DATA_AND_METADATA_EXCHANGE: SDMX -     Statistical Data and Metadata Exchange HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_SPASE_DATA_MODEL: SPASE Data Model OTHER: other</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>class MetadataStandardDccurls(Enum):\n    \"\"\"Attributes:\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_ABCD_ACCESS_BIOLOGICAL_COLLECTION_DATA: ABCD - Access to\n        Biological Collection Data\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_AGMES_AGRICULTURAL_METADATA_ELEMENT_SET: AgMES -\n        Agricultural Metadata Element Set\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_AVM_ASTRONOMY_VISUALIZATION_METADATA: AVM - Astronomy\n        Visualization Metadata\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CF_CLIMATE_AND_FORECAST_METADATA_CONVENTIONS: CF (Climate\n        and Forecast) Metadata Conventions\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CIF_CRYSTALLOGRAPHIC_INFORMATION_FRAMEWORK: CIF -\n        Crystallographic Information Framework\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CIM_COMMON_INFORMATION_MODEL: CIM - Common Information\n        Model\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CSMD_CCLRC_CORE_SCIENTIFIC_METADATA_MODEL: CSMD-CCLRC\n        Core Scientific Metadata Model\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DARWIN_CORE: Darwin Core\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DATACITE_METADATA_SCHEMA: DataCite Metadata Schema\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DCAT_DATA_CATALOG_VOCABULARY: DCAT - Data Catalog\n        Vocabulary\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DDI_DATA_DOCUMENTATION_INITIATIVE: DDI - Data\n        Documentation Initiative\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DIF_DIRECTORY_INTERCHANGE_FORMAT: DIF - Directory\n        Interchange Format\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DUBLIN_CORE: Dublin Core\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_EML_ECOLOGICAL_METADATA_LANGUAGE: EML - Ecological\n        Metadata Language\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_FGDCCSDGM_FEDERAL_GEOGRAPHIC_DATA_COMMITTEE_CONTENT_STANDARD_DIGITAL_GE:\n        FGDC/CSDGM - Federal Geographic Data Committee Content Standard for Digital Geospatial Metadata\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_FITS_FLEXIBLE_IMAGE_TRANSPORT_SYSTEM: FITS - Flexible\n        Image Transport System\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_GENOME_METADATA: Genome Metadata\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_INTERNATIONAL_VIRTUAL_OBSERVATORY_ALLIANCE_TECHNICAL_SPECIFICATIONS:\n        International Virtual Observatory Alliance Technical Specifications\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_ISA_TAB: ISA-Tab\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_ISO_19115: ISO 19115\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_MIBBI_MINIMUM_INFORMATION_BIOLOGICAL_AND_BIOMEDICAL_INVESTIGATIONS:\n        MIBBI - Minimum Information for Biological and Biomedical Investigations\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_MIDAS_HERITAGE: MIDAS-Heritage\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OAI_ORE_OPEN_ARCHIVES_INITIATIVE_OBJECT_REUSE_AND_EXCHANGE:\n        OAI-ORE - Open Archives Initiative Object Reuse and Exchange\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OBSERV_OM: Observ-OM\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OBSERVATIONS_AND_MEASUREMENTS: Observations and\n        Measurements\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OME_XML_OPEN_MICROSCOPY_ENVIRONMENT_XML: OME-XML - Open\n        Microscopy Environment XML\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_PROTOCOL_DATA_ELEMENT_DEFINITIONS: Protocol Data Element\n        Definitions\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_PROV: PROV\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_QUDEX_QUALITATIVE_DATA_EXCHANGE_FORMAT: QuDEx -\n        Qualitative Data Exchange Format\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_RDF_DATA_CUBE_VOCABULARY: RDF Data Cube Vocabulary\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_REPOSITORY_DEVELOPED_METADATA_SCHEMAS: Repository-\n        Developed Metadata Schemas\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_SDMX_STATISTICAL_DATA_AND_METADATA_EXCHANGE: SDMX -\n        Statistical Data and Metadata Exchange\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_SPASE_DATA_MODEL: SPASE Data Model\n    OTHER: other\n    \"\"\"\n\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_ABCD_ACCESS_BIOLOGICAL_COLLECTION_DATA = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/abcd-access-biological-collection-data\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_AGMES_AGRICULTURAL_METADATA_ELEMENT_SET = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/agmes-agricultural-metadata-element-set\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_AVM_ASTRONOMY_VISUALIZATION_METADATA = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/avm-astronomy-visualization-metadata\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CF_CLIMATE_AND_FORECAST_METADATA_CONVENTIONS = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/cf-climate-and-forecast-metadata-conventions\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CIF_CRYSTALLOGRAPHIC_INFORMATION_FRAMEWORK = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/cif-crystallographic-information-framework\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CIM_COMMON_INFORMATION_MODEL = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/cim-common-information-model\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_CSMD_CCLRC_CORE_SCIENTIFIC_METADATA_MODEL = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/csmd-cclrc-core-scientific-metadata-model\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DARWIN_CORE = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/darwin-core\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DATACITE_METADATA_SCHEMA = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/datacite-metadata-schema\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DCAT_DATA_CATALOG_VOCABULARY = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/dcat-data-catalog-vocabulary\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DDI_DATA_DOCUMENTATION_INITIATIVE = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/ddi-data-documentation-initiative\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DIF_DIRECTORY_INTERCHANGE_FORMAT = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/dif-directory-interchange-format\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_DUBLIN_CORE = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/dublin-core\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_EML_ECOLOGICAL_METADATA_LANGUAGE = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/eml-ecological-metadata-language\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_FGDCCSDGM_FEDERAL_GEOGRAPHIC_DATA_COMMITTEE_CONTENT_STANDARD_DIGITAL_GE = \"http://www.dcc.ac.uk/resources/metadata-standards/fgdccsdgm-federal-geographic-data-committee-content-standard-digital-ge\"\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_FITS_FLEXIBLE_IMAGE_TRANSPORT_SYSTEM = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/fits-flexible-image-transport-system\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_GENOME_METADATA = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/genome-metadata\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_INTERNATIONAL_VIRTUAL_OBSERVATORY_ALLIANCE_TECHNICAL_SPECIFICATIONS = \"http://www.dcc.ac.uk/resources/metadata-standards/international-virtual-observatory-alliance-technical-specifications\"\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_ISA_TAB = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/isa-tab\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_ISO_19115 = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/iso-19115\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_MIBBI_MINIMUM_INFORMATION_BIOLOGICAL_AND_BIOMEDICAL_INVESTIGATIONS = \"http://www.dcc.ac.uk/resources/metadata-standards/mibbi-minimum-information-biological-and-biomedical-investigations\"\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_MIDAS_HERITAGE = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/midas-heritage\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OAI_ORE_OPEN_ARCHIVES_INITIATIVE_OBJECT_REUSE_AND_EXCHANGE = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/oai-ore-open-archives-initiative-object-reuse-and-exchange\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OBSERV_OM = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/observ-om\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OBSERVATIONS_AND_MEASUREMENTS = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/observations-and-measurements\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_OME_XML_OPEN_MICROSCOPY_ENVIRONMENT_XML = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/ome-xml-open-microscopy-environment-xml\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_PROTOCOL_DATA_ELEMENT_DEFINITIONS = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/protocol-data-element-definitions\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_PROV = \"http://www.dcc.ac.uk/resources/metadata-standards/prov\"\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_QUDEX_QUALITATIVE_DATA_EXCHANGE_FORMAT = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/qudex-qualitative-data-exchange-format\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_RDF_DATA_CUBE_VOCABULARY = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/rdf-data-cube-vocabulary\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_REPOSITORY_DEVELOPED_METADATA_SCHEMAS = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/repository-developed-metadata-schemas\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_SDMX_STATISTICAL_DATA_AND_METADATA_EXCHANGE = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/sdmx-statistical-data-and-metadata-exchange\"\n    )\n    HTTP_WWW_DCC_AC_UK_RESOURCES_METADATA_STANDARDS_SPASE_DATA_MODEL = (\n        \"http://www.dcc.ac.uk/resources/metadata-standards/spase-data-model\"\n    )\n    OTHER = \"other\"\n</code></pre>"},{"location":"resources/#re3data._resources.MetadataStandardName","title":"<code>MetadataStandardName</code>  <code>dataclass</code>","text":"<p>Attributes: value: metadata_standard_scheme: The scheme of the metadata standards.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass MetadataStandardName:\n    \"\"\"Attributes:\n    value:\n    metadata_standard_scheme: The scheme of the metadata standards.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: None | MetadataStandardDccnames = field(\n        default=None,\n        metadata={\n            \"required\": True,\n        },\n    )\n    metadata_standard_scheme: None | MetadataStandardScheme = field(\n        default=None,\n        metadata={\n            \"name\": \"metadataStandardScheme\",\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Policy","title":"<code>Policy</code>  <code>dataclass</code>","text":"<p>Attributes: policy_name: Name of the policy. policy_url: URL of the policy.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass Policy:\n    \"\"\"Attributes:\n    policy_name: Name of the policy.\n    policy_url: URL of the policy.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    policy_name: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"policyName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    policy_url: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"policyURL\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Repository","title":"<code>Repository</code>  <code>dataclass</code>","text":"<p>               Bases: <code>IdMixin</code></p> <p>re3data_org_identifier: A globally unique and persistent identifier that refers to the research data     repository entry in re3data.dorg. The ID is assigned by re3data.org. repository_name: The full name of the research data repository. additional_name: The alternative name or acronym for the research data repository. repository_url: The URL, which gives reference to the research data repository. repository_identifier: A globally unique identifier (identifier in form of a link) that refers to the     research data repository (e.g. DOI, URN, VIAF, GND). description: A textual description containing additional information about the data repository (primary     language is English). repository_contact: Email address of the contact or an URL of an online contact form of the repository. type_value: The type of the research data repository. size: The number of items contained in the research data repository. start_date: Releasing date of the research data repository. end_date: Date when the research data repository went offline or stopped ingesting new research data     (still making the research data available). repository_language: The user interface language of the research data repository. subject: The subject(s) of the research data repository. mission_statement_url: The URL of a mission statement describing the designated community of the research     data repository. content_type: All types of resources available in the research data repository. provider_type: The type of provider. keyword: English keyword(s) describing the subject focus of the research data repository. institution: All institutions being responsible for funding, creating and/or running the research data     repository (wrapper element). policy: Any kind of policy (e.g. data policy, etc.) provided by the research data repository to clarify     legal aspects (wrapper element). database_access: (wrapper element) database_license: Database license of the research data repository (wrapper element). data_access: (wrapper element) data_license: License of the data, existing in the research data repository. (wrapper element) data_upload: (wrapper element) data_upload_license: The license for data upload (wrapper element). software: The software that is used to run the research data repository (wrapper element). versioning: The research data repository supports versioning of research data. api: API URL. pid_system: The persistent identifier system that is used by the research data repository. citation_guideline_url: The URL of the research data repository providing information on how to cite its     research data. The DataCite citation format is recommended (http://www.datacite.org/whycitedata). aid_system: The author identifier system that is used by the research data repository. enhanced_publication: The research data repository offers the interlinking between publications and data. quality_management: Any form of quality management concerning the data or metadata of the research data     repository. certificate: The certificate, seal or standard the research data repository complies with. metadata_standard: (wrapper element) syndication: URL of the alerting service(s) provided by the research data repository. remarks: Additional remarks that are visible to all users. entry_date: The date the research data repository was indexed in re3data.org. last_update: The date the metadata of the research data repository was updated.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass Repository(IdMixin):\n    \"\"\"Attributes:\n    re3data_org_identifier: A globally unique and persistent identifier that refers to the research data\n        repository entry in re3data.dorg. The ID is assigned by re3data.org.\n    repository_name: The full name of the research data repository.\n    additional_name: The alternative name or acronym for the research data repository.\n    repository_url: The URL, which gives reference to the research data repository.\n    repository_identifier: A globally unique identifier (identifier in form of a link) that refers to the\n        research data repository (e.g. DOI, URN, VIAF, GND).\n    description: A textual description containing additional information about the data repository (primary\n        language is English).\n    repository_contact: Email address of the contact or an URL of an online contact form of the repository.\n    type_value: The type of the research data repository.\n    size: The number of items contained in the research data repository.\n    start_date: Releasing date of the research data repository.\n    end_date: Date when the research data repository went offline or stopped ingesting new research data\n        (still making the research data available).\n    repository_language: The user interface language of the research data repository.\n    subject: The subject(s) of the research data repository.\n    mission_statement_url: The URL of a mission statement describing the designated community of the research\n        data repository.\n    content_type: All types of resources available in the research data repository.\n    provider_type: The type of provider.\n    keyword: English keyword(s) describing the subject focus of the research data repository.\n    institution: All institutions being responsible for funding, creating and/or running the research data\n        repository (wrapper element).\n    policy: Any kind of policy (e.g. data policy, etc.) provided by the research data repository to clarify\n        legal aspects (wrapper element).\n    database_access: (wrapper element)\n    database_license: Database license of the research data repository (wrapper element).\n    data_access: (wrapper element)\n    data_license: License of the data, existing in the research data repository. (wrapper element)\n    data_upload: (wrapper element)\n    data_upload_license: The license for data upload (wrapper element).\n    software: The software that is used to run the research data repository (wrapper element).\n    versioning: The research data repository supports versioning of research data.\n    api: API URL.\n    pid_system: The persistent identifier system that is used by the research data repository.\n    citation_guideline_url: The URL of the research data repository providing information on how to cite its\n        research data. The DataCite citation format is recommended (http://www.datacite.org/whycitedata).\n    aid_system: The author identifier system that is used by the research data repository.\n    enhanced_publication: The research data repository offers the interlinking between publications and data.\n    quality_management: Any form of quality management concerning the data or metadata of the research data\n        repository.\n    certificate: The certificate, seal or standard the research data repository complies with.\n    metadata_standard: (wrapper element)\n    syndication: URL of the alerting service(s) provided by the research data repository.\n    remarks: Additional remarks that are visible to all users.\n    entry_date: The date the research data repository was indexed in re3data.org.\n    last_update: The date the metadata of the research data repository was updated.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    re3data_org_identifier: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"re3data.orgIdentifier\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    repository_name: None | RepositoryName = field(\n        default=None,\n        metadata={\n            \"name\": \"repositoryName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    additional_name: list[AdditionalName] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"additionalName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    repository_url: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"repositoryURL\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    repository_identifier: list[str] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"repositoryIdentifier\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    description: None | Description = field(\n        default=None,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    repository_contact: list[str] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"repositoryContact\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    type_value: list[RepositoryTypes] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"type\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_occurs\": 1,\n        },\n    )\n    size: None | Size = field(\n        default=None,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    # Note: Unfortunately, we had to add `str` type manually.\n    start_date: None | XmlPeriod | XmlDate | str = field(\n        default=None,\n        metadata={\n            \"name\": \"startDate\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_inclusive\": XmlDate(1000, 1, 1),\n            \"max_inclusive\": XmlDate(2999, 12, 31),\n        },\n    )\n    # Note: Unfortunately, we had to add `str` type manually.\n    end_date: None | XmlPeriod | XmlDate | str = field(\n        default=None,\n        metadata={\n            \"name\": \"endDate\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_inclusive\": XmlDate(1000, 1, 1),\n            \"max_inclusive\": XmlDate(2999, 12, 31),\n        },\n    )\n    repository_language: list[Languages] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"repositoryLanguage\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_occurs\": 1,\n        },\n    )\n    subject: list[Subject] = field(\n        default_factory=list,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_occurs\": 1,\n        },\n    )\n    mission_statement_url: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"missionStatementURL\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    content_type: list[ContentType] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"contentType\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    provider_type: list[ProviderTypes] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"providerType\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_occurs\": 1,\n            \"max_occurs\": 2,\n        },\n    )\n    keyword: list[str] = field(\n        default_factory=list,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    institution: list[Institution] = field(\n        default_factory=list,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_occurs\": 1,\n        },\n    )\n    policy: list[Policy] = field(\n        default_factory=list,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    database_access: None | DatabaseAccess = field(\n        default=None,\n        metadata={\n            \"name\": \"databaseAccess\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n    database_license: list[DatabaseLicense] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"databaseLicense\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    data_access: list[DataAccess] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"dataAccess\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_occurs\": 1,\n        },\n    )\n    data_license: list[DataLicense] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"dataLicense\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_occurs\": 1,\n        },\n    )\n    data_upload: list[DataUpload] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"dataUpload\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_occurs\": 1,\n        },\n    )\n    data_upload_license: list[DataUploadLicense] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"dataUploadLicense\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    software: list[Software] = field(\n        default_factory=list,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    versioning: None | Yesno = field(\n        default=None,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    api: list[Api] = field(\n        default_factory=list,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    pid_system: list[PidSystems] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"pidSystem\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"min_occurs\": 1,\n        },\n    )\n    citation_guideline_url: None | str = field(\n        default=None,\n        metadata={\n            \"name\": \"citationGuidelineURL\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    aid_system: list[AidSystems] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"aidSystem\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    enhanced_publication: None | Yesnoun = field(\n        default=None,\n        metadata={\n            \"name\": \"enhancedPublication\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    quality_management: None | Yesnoun = field(\n        default=None,\n        metadata={\n            \"name\": \"qualityManagement\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    certificate: list[Certificates] = field(\n        default_factory=list,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    metadata_standard: list[MetadataStandard] = field(\n        default_factory=list,\n        metadata={\n            \"name\": \"metadataStandard\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    syndication: list[Syndication] = field(\n        default_factory=list,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    remarks: None | str = field(\n        default=None,\n        metadata={\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n        },\n    )\n    entry_date: None | XmlPeriod | XmlDate = field(\n        default=None,\n        metadata={\n            \"name\": \"entryDate\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n            \"min_inclusive\": XmlDate(1000, 1, 1),\n            \"max_inclusive\": XmlDate(2999, 12, 31),\n        },\n    )\n    last_update: None | XmlPeriod | XmlDate = field(\n        default=None,\n        metadata={\n            \"name\": \"lastUpdate\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n            \"min_inclusive\": XmlDate(1000, 1, 1),\n            \"max_inclusive\": XmlDate(2999, 12, 31),\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.RepositoryName","title":"<code>RepositoryName</code>  <code>dataclass</code>","text":"<p>Attributes: value: language: Language of the research data repository name.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass RepositoryName:\n    \"\"\"Attributes:\n    value:\n    language: Language of the research data repository name.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: str = field(\n        default=\"\",\n        metadata={\n            \"required\": True,\n        },\n    )\n    language: None | Languages = field(\n        default=None,\n        metadata={\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Size","title":"<code>Size</code>  <code>dataclass</code>","text":"<p>Attributes: value: updated: The date of the last update of the research data repository size.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass Size:\n    \"\"\"Attributes:\n    value:\n    updated: The date of the last update of the research data repository size.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: str = field(\n        default=\"\",\n        metadata={\n            \"required\": True,\n        },\n    )\n    # Note: Unfortunately, we had to add `str` type manually due to inconsistencies between the API data and\n    # the XSD schema. This led to numerous `ConverterWarnings`. Ideally, the data would conform to the schema,\n    # but until then, this workaround helps maintain compatibility.\n    updated: None | XmlPeriod | XmlDate | str = field(\n        default=None,\n        metadata={\n            \"type\": \"Attribute\",\n            \"required\": True,\n            \"min_inclusive\": XmlDate(1000, 1, 1),\n            \"max_inclusive\": XmlDate(2999, 12, 31),\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Software","title":"<code>Software</code>  <code>dataclass</code>","text":"<p>Attributes: software_name: Name of the research data repository software.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass Software:\n    \"\"\"Attributes:\n    software_name: Name of the research data repository software.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    software_name: None | SoftwareNames = field(\n        default=None,\n        metadata={\n            \"name\": \"softwareName\",\n            \"type\": \"Element\",\n            \"namespace\": \"http://www.re3data.org/schema/2-2\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Subject","title":"<code>Subject</code>  <code>dataclass</code>","text":"<p>Attributes: value: subject_scheme: The subject scheme according to which the subject (see ID 13 subject) of the research     data repository described.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass Subject:\n    \"\"\"Attributes:\n    value:\n    subject_scheme: The subject scheme according to which the subject (see ID 13 subject) of the research\n        data repository described.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: None | SubjectText = field(\n        default=None,\n        metadata={\n            \"required\": True,\n        },\n    )\n    subject_scheme: None | SubjectScheme = field(\n        default=None,\n        metadata={\n            \"name\": \"subjectScheme\",\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"},{"location":"resources/#re3data._resources.Syndication","title":"<code>Syndication</code>  <code>dataclass</code>","text":"<p>Attributes: value: syndication_type: Type of alerting service.</p> Source code in <code>src/re3data/_resources/repository.py</code> <pre><code>@dataclass(slots=True)\nclass Syndication:\n    \"\"\"Attributes:\n    value:\n    syndication_type: Type of alerting service.\n    \"\"\"\n\n    class Meta:\n        global_type = False\n\n    value: str = field(\n        default=\"\",\n        metadata={\n            \"required\": True,\n        },\n    )\n    syndication_type: None | SyndicationTypes = field(\n        default=None,\n        metadata={\n            \"name\": \"syndicationType\",\n            \"type\": \"Attribute\",\n            \"required\": True,\n        },\n    )\n</code></pre>"}]}