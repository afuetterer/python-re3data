{#

This template is adapted from:
"python-semantic-release" (MIT License)
https://github.com/python-semantic-release/python-semantic-release/blob/v9.17.0/src/semantic_release/data/templates/angular/md/.components/changes.md.j2

#}{%  from 'macros.md.j2' import apply_alphabetical_ordering_by_brk_descriptions
%}{%  from 'macros.md.j2' import apply_alphabetical_ordering_by_descriptions
%}{%  from 'macros.md.j2' import format_breaking_changes_description, format_commit_summary_line
%}{%  from 'custom.md.j2' import section_heading_order
%}{#
EXAMPLE:

### Features

- Add new feature ([#10](https://domain.com/namespace/repo/pull/10),
  [`abcdef0`](https://domain.com/namespace/repo/commit/HASH))

- **scope**: Add new feature ([`abcdef0`](https://domain.com/namespace/repo/commit/HASH))

### Bug Fixes

- Fix bug ([#11](https://domain.com/namespace/repo/pull/11),
  [`abcdef1`](https://domain.com/namespace/repo/commit/HASH))

### BREAKING CHANGES

- With the change _____, the change causes ___ effect. Ultimately, this section
  it is a more detailed description of the breaking change. With an optional
  scope prefix like the commit messages above.

- **scope**: this breaking change has a scope to identify the part of the code that
  this breaking change applies to for better context.

#}{%  set max_line_width = max_line_width | default(120)
%}{%  set hanging_indent = hanging_indent | default(2)
%}{#
#}{%  for type_ in section_heading_order if type_ in commit_objects
%}{#    PREPROCESS COMMITS (order by description & format description line)
#}{%    set ns = namespace(commits=commit_objects[type_])
%}{{    apply_alphabetical_ordering_by_descriptions(ns) | default("", true)
}}{#
#}{%    set commit_descriptions = []
%}{#
#}{%    for commit in ns.commits
%}{#      # Add reference links to the commit summary line
#}{%      set description = "- %s" | format(format_commit_summary_line(commit))
%}{%      set description = description | autofit_text_width(max_line_width, hanging_indent)
%}{{      commit_descriptions.append(description) | default("", true)
}}{%    endfor
%}{#
   #    # PRINT SECTION (header & commits)
#}{{    "\n"
}}{{    "### %s\n" | format(type_ | title)
}}{{    "\n"
}}{{    "%s\n" | format(commit_descriptions | unique | join("\n"))
}}{%  endfor
-%}
{#
   #  # Determine if any commits have a breaking change
   #  # commit_objects is a dictionary of strings to a list of commits { "Features", [ParsedCommit(), ...] }
#}{%  set breaking_commits = []
%}{%  for commits in commit_objects.values()
%}{#    # Filter out breaking change commits that have no breaking descriptions
#}{{    breaking_commits.extend(
          commits | rejectattr("error", "defined") | selectattr("breaking_descriptions.0")
        ) | default("", true)
}}{%  endfor
%}{#
#}{%  if breaking_commits | length > 0
%}{#    PREPROCESS COMMITS
#}{%    set brk_ns = namespace(commits=breaking_commits)
%}{{    apply_alphabetical_ordering_by_brk_descriptions(brk_ns) | default("", true)
}}{#
#}{%    set brking_descriptions = []
%}{#
#}{%    for commit in brk_ns.commits
%}{%      set full_description = "- %s" | format(
            format_breaking_changes_description(commit).split("\n\n") | join("\n\n- ")
          )
%}{{      brking_descriptions.append(
            full_description | autofit_text_width(max_line_width, hanging_indent)
          ) | default("", true)
}}{%    endfor
%}{#
   #    # PRINT BREAKING CHANGE DESCRIPTIONS (header & descriptions)
#}{{    "\n"
}}{{    "### BREAKING CHANGES\n"
}}{{
        "\n%s\n" | format(brking_descriptions | unique | join("\n\n"))
}}{#
#}{%  endif
-%}
